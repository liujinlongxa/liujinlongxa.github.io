<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>liujinlongxa的技术博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liujinlongxa.com/"/>
  <updated>2017-03-27T09:04:04.000Z</updated>
  <id>http://liujinlongxa.com/</id>
  
  <author>
    <name>liujinlongxa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何获取分享h5页面时的缩略图</title>
    <link href="http://liujinlongxa.com/2017/03/27/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%88%86%E4%BA%ABh5%E9%A1%B5%E9%9D%A2%E6%97%B6%E7%9A%84%E7%BC%A9%E7%95%A5%E5%9B%BE/"/>
    <id>http://liujinlongxa.com/2017/03/27/如何获取分享h5页面时的缩略图/</id>
    <published>2017-03-27T08:37:13.000Z</published>
    <updated>2017-03-27T09:04:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近产品提了一个需求，在分享应用内h5页面时，不能像以前一样，使用应用的图标作为分享的缩略图，要使用H5页面内的一张图片作为缩略图进行分享。</p>
<p>我调查了一下市面上一些常见应用的做法，基本上可以总结出三种做法：</p>
<h3 id="第一种方法：H5页面内指定分享图片地址"><a href="#第一种方法：H5页面内指定分享图片地址" class="headerlink" title="第一种方法：H5页面内指定分享图片地址"></a>第一种方法：H5页面内指定分享图片地址</h3><p>比较常见的做法是，在h5页面内定义一个JS的全局变量或者json，指定分享用的图片地址，APP内，通过JavaScriptCore获取全局变量，然后用于分享。</p>
<p>具体这样做的应用有：Keep，哔哩哔哩（部分页面），京东（部分页面）</p>
<p>还有一种是把分享的信息定义在页面头部(head标签里)，QQ音乐就是这样做的。</p>
<h3 id="第二种做法：固定分享页面内第一张符合条件的图片"><a href="#第二种做法：固定分享页面内第一张符合条件的图片" class="headerlink" title="第二种做法：固定分享页面内第一张符合条件的图片"></a>第二种做法：固定分享页面内第一张符合条件的图片</h3><p>如果H5页面是第三方提供，就不能通过第一种方法去指定分享内容了。这种情况下，大多数应用的做法就是取页面内第一张符合大小的图片作为分享图片。</p>
<p>这里我写了一个JS函数，只要把这个函数注入到H5页面中，APP就可以通过调用这个方法来获取到第一张符合大小的图片。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImage</span>(<span class="params">width, height</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> images = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'img'</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; images.length; index++) &#123;</div><div class="line">        <span class="keyword">var</span> img = images[index];</div><div class="line">        <span class="keyword">var</span> imgData = <span class="keyword">new</span> Image();</div><div class="line">        imgData.src = img.src;</div><div class="line">        <span class="keyword">if</span> (imgData.width &gt; width &amp;&amp; imgData.height &gt; height) &#123;</div><div class="line">            <span class="keyword">return</span> imgData.src;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体这样做的应用有：微信，今日头条</p>
<h3 id="第三种做法：对页面进行截图，使用截图进行分享"><a href="#第三种做法：对页面进行截图，使用截图进行分享" class="headerlink" title="第三种做法：对页面进行截图，使用截图进行分享"></a>第三种做法：对页面进行截图，使用截图进行分享</h3><p>有些应用在分享时会对H5页面进行截图，然后把截图作为分享的内容。</p>
<p>具体这样做的应用有：微博，UC浏览器</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上就是三种获取H5页面内分享缩略图的三种策略，我们最终选择的是第一种和第二种相结合的方式，如果页面内指定了分享图片，则使用，否则获取页面内第一张符合条件的图片进行分享。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近产品提了一个需求，在分享应用内h5页面时，不能像以前一样，使用应用的图标作为分享的缩略图，要使用H5页面内的一张图片作为缩略图进行分享。&lt;/p&gt;
&lt;p&gt;我调查了一下市面上一些常见应用的做法，基本上可以总结出三种做法：&lt;/p&gt;
&lt;h3 id=&quot;第一种方法：H5页面内指定分
    
    </summary>
    
      <category term="iOS开发" scheme="http://liujinlongxa.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="分享" scheme="http://liujinlongxa.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>深入理解git merge和git rebase（续）</title>
    <link href="http://liujinlongxa.com/2017/03/06/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3git-merge%E5%92%8Cgit-rebase%EF%BC%88%E7%BB%AD%EF%BC%89/"/>
    <id>http://liujinlongxa.com/2017/03/06/深入理解git-merge和git-rebase（续）/</id>
    <published>2017-03-06T01:34:43.000Z</published>
    <updated>2017-03-06T03:50:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文接上一篇，主要讲解一下git rebase的用法和使用中注意的事项。</p>
<h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>git rebase，也叫做变基，也是Git种一种合并代码的手段，与git merge不同的是，rebase是直接将一个分支从他们的共同父节点开始后的所有Commit依次合并到另外一个分支上。如下图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/e3bdbc7fff28676ccefdcb16f4d43095.png" alt="1"></p>
<p>两个分支develop和master，如果通过命令<code>git merge</code>将develop分支合并到master分支，Git会将‘C’，‘3’以及两个分支的共同父节点‘B’进行三路合并，合并完成后生成一个新节点，如下图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/ce919bb1921ee5c302baafbb0f45785f.png" alt="2"></p>
<p>如果<code>git rebase</code>将develop分支变基到master分支上，Git会将develop分支上的所有commit(1,2,3)依次合并到master，每一次合并都会生成一个新的提交(如下图1’,2’,3’)，合并完成后，如下图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/0478f567c5748186a200cd4da8b5ddd8.png" alt="3"></p>
<p>可以明显的看到，使用<code>git rebase</code>，分支线依然保持为一条，分支线看起来也没有那么乱，这也是<code>git rebase</code>相对于<code>git merge</code>的一个优点，但是另一方面，<code>git rebase</code>在合并每一个提交并生成一个新的提交时，会改写原来提交的提交时间（不会改写提交人），而且<code>git rebase</code>也没有留下合并的痕迹，可追溯性没那么强。</p>
<h3 id="为什么那么多冲突"><a href="#为什么那么多冲突" class="headerlink" title="为什么那么多冲突"></a>为什么那么多冲突</h3><p>在使用<code>git rebase</code>的过程中经常会遇到这种情况，在执行的<code>git rebase</code>操作后，遇到了一个冲突，修改冲突后执行<code>git rebase --continue</code>，然后又来一个冲突，冲突一个接一个，而且有时候同一个冲突会出现好几次。</p>
<p>其实，这是由rebase的原理造成的，Git在合并每一个Commit时都会判断是否有冲突，如下图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/90ff7dd4f79dddc65656820254dba48b.png" alt="4"></p>
<p>两个分支develop和master以及他们各自的文件内容，现在要将develop变基到master上，Git会先将develop的第一个commit和master分支的最新提交合并，合并后如下：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/31c92a8c54e271fb69053a22c984c6dd.png" alt="5"></p>
<p>会报一个冲突，解决完冲突后，执行<code>git rebase --continue</code>，根据冲突不同的解决方案，可能会与不同的结果，如下图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/74efc09f8e231d078914a36f5223e289.png" alt="6"></p>
<p>上图中的两种冲突解决方案，在执行<code>git rebase --continue</code>后，依然再会报一个冲突，应为在合并develop的第二个提交时，依然有冲突。下面的解决方案则不会造成再次冲突，因为这种解决方案是完全用develop分支覆盖了master分支，如下图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/510fa8570fd012eb1723d6c521eb5cc6.png" alt="7"></p>
<p>以上就是造成<code>git rebase</code>冲突太多的具体原因。</p>
<h3 id="有那么点用的rerere"><a href="#有那么点用的rerere" class="headerlink" title="有那么点用的rerere"></a>有那么点用的rerere</h3><p>冲突太多怎么办，Git提供了一个辅助工具<code>git rerere</code>命令，具体用法可以参考<a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-Rerere" target="_blank" rel="external">git rerere</a>。rerere命令能够记住解决一个冲突的方法，这样在下一次看到相同冲突时，Git 可以为你自动地解决它。</p>
<p>那么rerere能够避免<code>git rebase</code>带来的冲突吗，答案是否定的。因为rerere在判断两个冲突是否为相同冲突是根据冲突体的两部分是否完全一样来进行的，就上面的例子而言，不管是哪种冲突解决方案，第一次和第二次冲突的冲突体都不完全一样，因此rerere都不会自动帮我们修复。</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/b80ef2ec61407d7a737a0997da6c960d.png" alt="8"></p>
<p>而且，rerere命令也会记住错误的冲突解决方案，下次遇到相同的冲突时会直接应用错误的方案。不过你可以使用<code>git rerere forget &lt;pathspec&gt;</code>命令来删除Git记住的冲突解决方案。</p>
<p>说了这么多，那rerere命令到底有什么用呢？</p>
<p><code>git rerere</code>命令为我们提供了一种减少冲突的方案：当你要保证一个长期分支会干净地合并，但是又不想要一串中间的合并提交。 将rerere功能打开后偶尔合并，解决冲突，然后返回到合并前。 如果你持续这样做，那么最终的合并会很容易，因为rerere可以为你自动做所有的事情。<code>git rerere</code>也可以将冲突的解决方案共享给项目组的其他成员。</p>
<p>所以说rerere命令还有一点用的，不过他并不能彻底解决冲突多的问题，减少冲突还是需要我们在平时使用时规范git的使用方法，使用统一的git工作流。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本来打算写一篇的，但是因为太长了，所以分为两篇来写。由于写的比较仓促，文中如果有什么纰漏，欢迎指出。</p>
<p>参考资料：<br><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">Pro Git</a><br><a href="http://stackoverflow.com/questions/13825079/why-do-i-have-to-resolve-the-same-conflict-over-and-over" target="_blank" rel="external">Why do I have to resolve the same conflict over and over?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文接上一篇，主要讲解一下git rebase的用法和使用中注意的事项。&lt;/p&gt;
&lt;h2 id=&quot;git-rebase&quot;&gt;&lt;a href=&quot;#git-rebase&quot; class=&quot;headerlink&quot; title=&quot;git rebase&quot;&gt;&lt;/a&gt;git rebase&lt;/
    
    </summary>
    
      <category term="Git" scheme="http://liujinlongxa.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://liujinlongxa.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>深入理解git merge和git rebase</title>
    <link href="http://liujinlongxa.com/2017/03/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3git-merge%E5%92%8Cgit-rebase/"/>
    <id>http://liujinlongxa.com/2017/03/01/深入理解git-merge和git-rebase/</id>
    <published>2017-03-01T07:08:21.000Z</published>
    <updated>2017-03-06T02:37:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>git merge</code>和<code>git rebase</code>是我们平时在使用Git过程中用到比较多的两个命令。本文将主要介绍这个两个命令的基本用法以及使用中应该注意的事项。</p>
<h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><h3 id="不同的合并方式"><a href="#不同的合并方式" class="headerlink" title="不同的合并方式"></a>不同的合并方式</h3><p>顾名思义，<code>git merge</code>是用来将一个分支的代码合并到另一个分支。如下图，将develop分支上的代码合并到master分支上。</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/dafea7a6a7e2ce161b7b941ad4474186.png" alt="1"></p>
<p>上图中有一个<code>Fast-forward</code>字样，这是Git的一种合并方式。</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/31c51a26b1165b47797425e5d34a04a4.png" alt="2"></p>
<p>如上图，在master分支的B点时牵出一个develop分支，develop分支又有了3个新的提交1，2，3，而master分支此时没有新的提交，这是如果合并的话，develop分支不用动，master只用把分支的头指针指向develop的最新的一个提交3即可。合并后的结果如下图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/44379a35e3a385da59d1d996efd017bb.png" alt="3"></p>
<p>这个合并方式看似把两个分支合并了，实际上并没有真正进行合并操作，也没有留下合并的操作。默认<code>git merge</code>是采用<code>Fast-forward</code>方式进行合并的，如果不想采用这种方式，可以在命令后面加入<code>--no-ff</code>选项，如下：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/161174b53c54146aa465eacf41140787.png" alt="4"></p>
<p>不使用<code>Fast-forward</code>的方式进行合并，Git会为合并生成一个新的提交，合并后的结果如下图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/091081cb40b5eedbc5dc4ab2c8e4e13e.png" alt="5"></p>
<p>Commit C即是Git自动生成的合并提交。一般情况下我们在合并代码时都会加上<code>--no-ff</code>，这样可以更清晰的看见合并操作。</p>
<h3 id="一个不大不小的坑"><a href="#一个不大不小的坑" class="headerlink" title="一个不大不小的坑"></a>一个不大不小的坑</h3><p>如下图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/e92aed55a7593922b525c2723894b202.png" alt="6"></p>
<p> 在牵出develop分支后，master分支又有了新的提交C，这时候如果把develop分支合并到master，就不能简单的通过移动master分支头指针来进行了，这时候默认执行的是<strong>recursive</strong>(递归)的策略进行合并的，这种策略下，Git会对两个分支的头结点（C与3）以及他们的共同父节点（B）进行三路合并，这种情况下就可能出现代码冲突。</p>
<p> 而且Git在合并两个分支时，并不会根据Commit的提交时间来判断哪个分支的代码更新，这就可能造成一个隐藏的问题：</p>
<p> 想象一下这种场景，一个团队内分为两个小组分别开发A和B两个功能版本，A版本的开发人员修改了某个文件（假定是file1），B版本的的开发人员发现他也要对file1做同样的修改才能继续开发，于是他对file1做了同样的修改（或者使用cherry-pick把A版本的相应的commit拉过来）。过了一段时间，A版本的开发人员发现他以前对file1的修改有问题，于是又把file1改了回去，而这时候B版本的开发人员并没有做同样的修改。这样，将来A版本和B版本合并到主干分支后，B版本的代码就会覆盖A的修改，于是错误的代码又被合并到了主干分支上。下面就是这个过程的示意图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/51b92d9f3934ffa53a1f2c9770a9895f.png" alt="7"></p>
<p>如图，序号1，2，3表示的是Commit的提交顺序，FeatureA分支在commit 2上把文件内容改为了<code>bbb111</code>, FeatureB分支把文件内容改为了<code>bbb222</code>，在commit 6上FeatureA有吧内容改回了<code>AAA</code>，而B分支没有做同样的修改，当把FeatureA合并到主干时，由于FeatureA相对于共通父节点Commit 1来说没有变化，因此就会使用FeatureB的内容作为最终的内容，而且这种情况下不会报任何冲突。这就极有可能造成错误的代码又被合并到了主干分支上，而且这种问题极难被察觉，就好像莫名其妙的发现代码丢失了一样。</p>
<p>要避免这种情况的发生，只能从流程上来规范git的操作。如果一个修改要应用到多个分支上，应该单独为这个修改建立一个临时分支，修改完成后，每一个需要用到这个修改的分支都合并这个临时分支。将来如果这个临时分支又有了新的提交，依然是每个分支都要合并。这样就可以避免出现上面的情况。</p>
<p>未完待续。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;git merge&lt;/code&gt;和&lt;code&gt;git rebase&lt;/code&gt;是我们平时在使用Git过程中用到比较多的两个命令。本文将主要介绍这个两个命令的基本用法以及使用中应该注意的事项。&lt;/p&gt;
&lt;h2 id=&quot;git-merge&quot;&gt;&lt;a href=&quot;#g
    
    </summary>
    
      <category term="Git" scheme="http://liujinlongxa.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://liujinlongxa.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发适配HTTPS总结</title>
    <link href="http://liujinlongxa.com/2017/02/07/iOS%E5%BC%80%E5%8F%91%E9%80%82%E9%85%8DHTTPS%E6%80%BB%E7%BB%93/"/>
    <id>http://liujinlongxa.com/2017/02/07/iOS开发适配HTTPS总结/</id>
    <published>2017-02-07T01:46:33.000Z</published>
    <updated>2017-03-01T06:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>年前给公司的项目适配了HTTPS，本来年前就该写这篇博客的，一直拖到现在才写。</p>
<p>本文的主要内容就是对整个适配过程做一个总结。网上有很多详细的教程，具体的适配过程本文就不再赘述了，这里主要总结一下我在适配过程中越到的问题以及一些经验。</p>
<h2 id="测试自建证书"><a href="#测试自建证书" class="headerlink" title="测试自建证书"></a>测试自建证书</h2><p>适配完成后可以使用自建证书进行测试，关于如何创建自建证书，网上有很多教程，可以自行百度。如果你使用的是AFNetworking框架，使用自建证书也非常简单，首先见证书(abc.cer)导入项目，然后加入代码如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.sessionManager = [[AFURLSessionManager alloc] initWithSessionConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration]];</div><div class="line"></div><div class="line">AFSecurityPolicy *securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate];</div><div class="line">securityPolicy.allowInvalidCertificates = <span class="literal">YES</span>;</div><div class="line">securityPolicy.validatesDomainName = <span class="literal">YES</span>;</div><div class="line"></div><div class="line"><span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"abc.cer"</span> ofType:<span class="literal">nil</span>];</div><div class="line"><span class="built_in">NSData</span> *certData = [<span class="built_in">NSData</span> dataWithContentsOfFile:path];</div><div class="line"><span class="built_in">NSSet</span> *set = [<span class="built_in">NSSet</span> setWithObjects:certData, <span class="literal">nil</span>];</div><div class="line"><span class="keyword">if</span> (certData) &#123;</div><div class="line">    securityPolicy.pinnedCertificates = set;</div><div class="line">&#125;</div><div class="line"><span class="keyword">self</span>.sessionManager.securityPolicy = securityPolicy;</div></pre></td></tr></table></figure>
<p>当然，正式环境还是需要使用CA机构颁发的证书，使用CA机构颁发的证书不需要导入证书，只需要加入以下代码即可：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.sessionManager = [[AFURLSessionManager alloc] initWithSessionConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration]];</div><div class="line"></div><div class="line">AFSecurityPolicy *policy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeNone];</div><div class="line"><span class="keyword">self</span>.sessionManager.securityPolicy = securityPolicy;</div></pre></td></tr></table></figure>
<h2 id="配置NSExceptionDomains"><a href="#配置NSExceptionDomains" class="headerlink" title="配置NSExceptionDomains"></a>配置NSExceptionDomains</h2><p>项目中一些不能使用HTTPS协议的请求，需要配置NSExceptionDomains。很多第三方服务的请求还没有支持HTTPS，这就需要我们把这些请求添加到NSExceptionDomains中。可以使用Charles抓包看有哪些第三方请求需要添加到NSExceptionDomains中。</p>
<p>另外，为了防止域名劫持，项目中可能会直接使用IP进行请求，我再测试过程中发现，即使不添加NSExceptionDomains，直接使用IP也可以正常请求。</p>
<p>对于WebView里的请求，可以NSAllowsArbitraryLoadsInWebContent字段来声明绕过ATS。</p>
<p>对于多媒体播放请求（使用AVFoundation），可以使用NSAllowsArbitraryLoadsInMedia字段来声明绕过ATS。</p>
<h2 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h2><p>一般公司服务器都会有多个环境（测试环境，正式环境等），证书一般只配置在正式环境上，这就要求我们在测试环境下需要关闭ATS。如果每次都手动修改Info.plist文件来关闭ATS，不但麻烦，也可能导致配置的信息丢失。一种比较好做法是创建多个Info.plist，根据不同的环境，自动切换使用不同的Info.plist。</p>
<p>如下，创建多个Info.plist</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/0c578284b3e0e8649ec145e1413f3d7a.png" alt="2"></p>
<p>然后在Build Setting中配置不同的环境使用不同的Info.plist</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/190482fe4f86763e6184834be9cff0bf.png" alt="3"></p>
<p>这样做有一个不好的地方是如果修改了Info.plist文件，需要同时修改两个。但这也比每次切换环境修改Info.plist要好，因为毕竟修改Info.plist的情况还是比较少的。</p>
<p>以上就是我在适配HTTPS过程中遇到的一些问题，希望对大家有所帮助。</p>
<p>参考资料：</p>
<p><a href="http://www.2cto.com/kf/201611/570823.html" target="_blank" rel="external">iOS开发适配HTTPS详细教程</a><br><a href="https://onevcat.com/2016/06/ios-10-ats/" target="_blank" rel="external">关于iOS10中ATS的问题</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;年前给公司的项目适配了HTTPS，本来年前就该写这篇博客的，一直拖到现在才写。&lt;/p&gt;
&lt;p&gt;本文的主要内容就是对整个适配过程做一个总结。网上有很多详细的教程，具体的适配过程本文就不再赘述了，这里主要总结一下我在适配过程中越到的问题以及一些经验。&lt;/p&gt;
&lt;h2 id=&quot;测
    
    </summary>
    
      <category term="iOS开发" scheme="http://liujinlongxa.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="HTTPS" scheme="http://liujinlongxa.com/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>使用NSURLProtocol时要注意的一些问题</title>
    <link href="http://liujinlongxa.com/2016/12/20/%E4%BD%BF%E7%94%A8NSURLProtocol%E6%B3%A8%E6%84%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://liujinlongxa.com/2016/12/20/使用NSURLProtocol注意的一些问题/</id>
    <published>2016-12-20T15:34:03.000Z</published>
    <updated>2017-03-01T06:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目中使用到了NSURLProtocol，用于拦截所有发出的请求并做一些处理。具体用法可以参考<a href="http://nshipster.cn/nsurlprotocol/" target="_blank" rel="external">这篇文章</a>，我还专门写了一个<a href="https://github.com/liujinlongxa/NSURLProtocolDemo" target="_blank" rel="external">Demo</a>。最近在使用过程中遇到了一些问题，记录如下。</p>
<h2 id="拦截到的POST请求的HTTPBody为空"><a href="#拦截到的POST请求的HTTPBody为空" class="headerlink" title="拦截到的POST请求的HTTPBody为空"></a>拦截到的POST请求的HTTPBody为空</h2><p>最近由于升级了AFNetworking，在使用NSURLProtocol过程中发现了一个问题，就是在拦截到POST请求后，HTTPBody是空的。以前使用旧版本的AFNetworking时是没有这问题的。分析了一下，新版的AFNetworking使用的是NSURLSession，旧版使用的是NSURLConnection，可能是由于这个原因导致的。网上查了一下，还真有这个问题，具体可以看<a href="http://stackoverflow.com/questions/36555018/why-is-the-httpbody-of-a-request-inside-an-nsurlprotocol-subclass-always-nil" target="_blank" rel="external">这个问题</a>以及<a href="https://bugs.webkit.org/show_bug.cgi?id=137299" target="_blank" rel="external">这里的讨论</a>。</p>
<p>网上有人提出了一种解决方案，就是不要使用HTTPBody，而使用HTTPBodyStream。具体实现如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSMutableURLRequest</span> * request = [[<span class="built_in">NSMutableURLRequest</span> alloc] initWithURL:url];</div><div class="line">request.allHTTPHeaderFields = <span class="keyword">self</span>.request.allHTTPHeaderFields;</div><div class="line"><span class="keyword">if</span> ([<span class="keyword">self</span>.request.HTTPMethod isEqualToString:<span class="string">@"POST"</span>]) &#123;</div><div class="line">    request.HTTPMethod = <span class="string">@"POST"</span>;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.request.HTTPBody) &#123;</div><div class="line">        uint8_t d[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">        <span class="built_in">NSInputStream</span> *stream = <span class="keyword">self</span>.request.HTTPBodyStream;</div><div class="line">        <span class="built_in">NSMutableData</span> *data = [[<span class="built_in">NSMutableData</span> alloc] init];</div><div class="line">        [stream open];</div><div class="line"></div><div class="line">        <span class="keyword">while</span> ([stream hasBytesAvailable]) &#123;</div><div class="line">            <span class="built_in">NSInteger</span> len = [stream read:d maxLength:<span class="number">1024</span>];</div><div class="line">            <span class="keyword">if</span> (len &gt; <span class="number">0</span> &amp;&amp; stream.streamError == <span class="literal">nil</span>) &#123;</div><div class="line">                [data appendBytes:(<span class="keyword">void</span> *)d length:len];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        request.HTTPBody = [data <span class="keyword">copy</span>];</div><div class="line">        [stream close];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        request.HTTPBody = <span class="keyword">self</span>.request.HTTPBody;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过这个方法就可以获得HTTPBody的内容。</p>
<h2 id="registerClass-方法只适用于sharedSession"><a href="#registerClass-方法只适用于sharedSession" class="headerlink" title="+registerClass:方法只适用于sharedSession"></a><code>+registerClass:</code>方法只适用于<code>sharedSession</code></h2><p>另外一个要注意的地方就是，只用在使用<code>[NSURLSession sharedSession]</code>时，注册NSURLProtocol才能使用<code>+registerClass:</code>方法，否则就需要使用<code>NSURLSessionConfiguration</code>来注册NSURLProtocol，代码如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSURLSessionConfiguration</span> *configuration = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</div><div class="line">configuration.protocolClasses = @[[MySessionURLProtocol <span class="keyword">class</span>]];</div><div class="line"><span class="keyword">self</span>.session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:configuration];</div></pre></td></tr></table></figure>
<p>因此，对于新版的AFNetworking，由于它使用的不是<code>sharedSession</code>，所以就不能简单的通过类方法<code>+registerClass:</code>来注册自定义NSURLProtocol，也必须通过<code>NSURLSessionConfiguration</code>来设置。代码如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSURLSessionConfiguration</span> *configuration = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</div><div class="line">configuration.protocolClasses = @[[CustomUrlProtocol <span class="keyword">class</span>]];</div><div class="line">AFHTTPSessionManager *sessionManager = [[AFHTTPSessionManager alloc] initWithBaseURL:baseUrl sessionConfiguration:configuration];</div><div class="line">[sessionManager GET:url parameters:params progress:^(<span class="built_in">NSProgress</span> * _Nonnull downloadProgress) &#123;</div><div class="line">    <span class="comment">// do somting</span></div><div class="line">&#125; success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span>  _Nullable responseObject) &#123;</div><div class="line">    <span class="comment">// do somting</span></div><div class="line">&#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</div><div class="line">    <span class="comment">// do somting</span></div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>以上就是使用NSURLProtocol时要注意的两个问题，希望能对大家有所帮助。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中使用到了NSURLProtocol，用于拦截所有发出的请求并做一些处理。具体用法可以参考&lt;a href=&quot;http://nshipster.cn/nsurlprotocol/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;，我还专门写
    
    </summary>
    
      <category term="iOS Tips" scheme="http://liujinlongxa.com/categories/iOS-Tips/"/>
    
    
      <category term="其他" scheme="http://liujinlongxa.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Xcode如何设置在编译前自动运行脚本</title>
    <link href="http://liujinlongxa.com/2016/11/27/Xcode%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E5%9C%A8%E7%BC%96%E8%AF%91%E5%89%8D%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/"/>
    <id>http://liujinlongxa.com/2016/11/27/Xcode如何设置在编译前自动运行脚本/</id>
    <published>2016-11-27T04:45:13.000Z</published>
    <updated>2017-03-01T06:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时我们可能需要在iOS项目打包前执行一些操作，例如更新资源，修改配置等等，手动修改太麻烦也太Low了，那有没有自动执行的方法呢？</p>
<p>当然有，这里我会列举三种方法，并且着重讲解一下最后一种方法</p>
<h3 id="三种方法"><a href="#三种方法" class="headerlink" title="三种方法"></a>三种方法</h3><ul>
<li>第一种方法：如果你使用的是脚本进行打包，那么事情就简单了，在执行xcodebuild命令前，执行你想做的操作就可以了。</li>
<li>第二种方法：使用CI平台，最常用的就是jenkins，一般的CI平台都支持在编译前执行脚本。</li>
<li>第三种方法：如果你使用的是Xcode Archive进行打包，那么就要用到下面的方法添加编译前执行的脚本。</li>
</ul>
<h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><p>打开项目配置，选择Build Phases</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/5335ab06bc21202c00fa0014d2df47a3.png" alt="1"></p>
<p>点击左上角的加号，选择New Run Script Phase</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/63c4d36a01c97b137892fa32fb78a028.png" alt="2"></p>
<p>这样就可以创建一个新Script Phase，然后在黑色区域写入你的脚本</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/f247183d1bc837e1d67ea5ae04281be5.png" alt="3"></p>
<p>在脚本中，你可以使用一些环境变量，例如<code>${SRCROOT}</code>表示项目的根目录，<code>${CONFIGURATION}</code>表示项目的Configuration，更多可以使用的环境变量可以参考<a href="https://developer.apple.com/legacy/library/documentation/DeveloperTools/Reference/XcodeBuildSettingRef/0-Introduction/introduction.html#//apple_ref/doc/uid/TP40003931-CH1-SW1" target="_blank" rel="external">苹果官方文档</a>。</p>
<p>最后一步，也是最关键的一步（我在这里卡了半天），选中你创建的Script Phase，然后按住鼠标，把它拖到Compile Source的上面，这样你的脚本才会在代码编译前执行，否则脚本是在代码编译后执行的，如下图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/d44a9e7f77e737fce5826e39d74a3d9d.png" alt="4"></p>
<p>这样在编译时就会自动执行脚本了。上图中的脚本内容是在Release下编译时自动执行一个Python脚本。脚本的输出内容可以在Build Log里找到，如下图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/7bef4677d75f71376b834102880f364b.png" alt="5"></p>
<p>以上就是整个配置过程，希望这篇文章对您有帮助。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时我们可能需要在iOS项目打包前执行一些操作，例如更新资源，修改配置等等，手动修改太麻烦也太Low了，那有没有自动执行的方法呢？&lt;/p&gt;
&lt;p&gt;当然有，这里我会列举三种方法，并且着重讲解一下最后一种方法&lt;/p&gt;
&lt;h3 id=&quot;三种方法&quot;&gt;&lt;a href=&quot;#三种方法&quot; 
    
    </summary>
    
      <category term="iOS Tips" scheme="http://liujinlongxa.com/categories/iOS-Tips/"/>
    
    
      <category term="Xcode" scheme="http://liujinlongxa.com/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>使用defaults命令获取iOS项目版本号</title>
    <link href="http://liujinlongxa.com/2016/11/15/%E4%BD%BF%E7%94%A8defaults%E5%91%BD%E4%BB%A4%E8%8E%B7%E5%8F%96iOS%E9%A1%B9%E7%9B%AE%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
    <id>http://liujinlongxa.com/2016/11/15/使用defaults命令获取iOS项目版本号/</id>
    <published>2016-11-15T01:51:44.000Z</published>
    <updated>2017-03-01T06:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>defaults命令可以用来读取和修改plist文件，因此可以用它来读取iOS项目里的Info.plist文件，具体用法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults read &lt;plist文件的绝对路径&gt; &lt;Key&gt;</div></pre></td></tr></table></figure>
<p>例如，读取项目的版本号，则名为如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults read ~/Project/Info.plist CFBundleShortVersionString</div></pre></td></tr></table></figure>
<p>这里要注意，<strong>路径一定要是绝对路径，不能是相对路径</strong>。</p>
<p>有了这个命令，我们就可以很方便的在脚本中获取版本号，编写一些更复杂的应用。</p>
<p>其实，获取版本号还可以使用xcode自带的<a href="https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/agvtool.1.html" target="_blank" rel="external">agvtool</a>，但是如果项目中有多个.xcodeproj文件，agvtool就不能正确获取版本号了，暂时还没找到解决方案。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://developer.apple.com/library/content/qa/qa1827/_index.html" target="_blank" rel="external">Automating Version and Build Numbers Using agvtool</a><br><a href="https://github.com/nomad/shenzhen/issues/160" target="_blank" rel="external">Include Build Number in ipa info command</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;defaults命令可以用来读取和修改plist文件，因此可以用它来读取iOS项目里的Info.plist文件，具体用法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;d
    
    </summary>
    
      <category term="iOS Tips" scheme="http://liujinlongxa.com/categories/iOS-Tips/"/>
    
    
      <category term="其他" scheme="http://liujinlongxa.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C中如何忽略warning</title>
    <link href="http://liujinlongxa.com/2016/11/10/Objective-C%E4%B8%AD%E5%A6%82%E4%BD%95%E5%BF%BD%E7%95%A5warning/"/>
    <id>http://liujinlongxa.com/2016/11/10/Objective-C中如何忽略warning/</id>
    <published>2016-11-10T13:05:51.000Z</published>
    <updated>2017-03-01T06:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>经常会在有些第三方框架里看到这样的代码：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma clang diagnostic push</span></div><div class="line"><span class="meta">#pragma clang diagnostic ignored <span class="meta-string">"-Wgnu"</span></span></div><div class="line">    <span class="built_in">NSString</span> *pathToBeMatched = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">if</span> (method &amp;&amp; path) &#123;</div><div class="line">        pathToBeMatched = [[[<span class="keyword">self</span> requestWithMethod:(method ?: <span class="string">@"GET"</span>) path:path parameters:<span class="literal">nil</span>] URL] path];</div><div class="line">    &#125;</div><div class="line"><span class="meta">#pragma clang diagnostic pop</span></div></pre></td></tr></table></figure>
<p>这段代码的前两句和最后一句的作用是忽略中间的代码的某种警告（warning），如果我们的代码中有些警告希望被忽略，可以使用这种方法忽略警告。</p>
<p>其中第二句代码的<code>-Wgnu</code>是警告类型，可以通过以下方法查看警告类型。</p>
<p>首先Command+b编译代码，然后Command+8来到报告导航栏，选中刚才的那次编译，如下图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/ba9ee4f9e59a474670f251598e7978d6.png" alt="1"></p>
<p>然后在左侧，找到相应的警告详情，点击左边的<img src="http://7xn88v.com1.z0.glb.clouddn.com/f12763686090a1cec73de963526971be.png" alt="2">按钮可以打开详情，然后就可以在最底部的警告描述里找到警告的类型，如下图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/4d8b40432de09a56e50622b099f002bb.png" alt="3"></p>
<p>以上就是OC忽略警告的方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经常会在有些第三方框架里看到这样的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;lin
    
    </summary>
    
      <category term="iOS Tips" scheme="http://liujinlongxa.com/categories/iOS-Tips/"/>
    
    
      <category term="Objective-C" scheme="http://liujinlongxa.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>使用nat123实现外网ssh连接内网树莓派设备</title>
    <link href="http://liujinlongxa.com/2016/11/05/%E4%BD%BF%E7%94%A8nat123%E5%AE%9E%E7%8E%B0%E5%A4%96%E7%BD%91ssh%E8%BF%9E%E6%8E%A5%E5%86%85%E7%BD%91%E6%A0%91%E8%8E%93%E6%B4%BE%E8%AE%BE%E5%A4%87/"/>
    <id>http://liujinlongxa.com/2016/11/05/使用nat123实现外网ssh连接内网树莓派设备/</id>
    <published>2016-11-05T09:56:46.000Z</published>
    <updated>2017-03-01T06:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zh.wikipedia.org/zh-cn/%E6%A0%91%E8%8E%93%E6%B4%BE" target="_blank" rel="external">树莓派</a>是一款基于Linux的单板机电脑。最近入手了一块，打算作为Linux服务器来使用。</p>
<p>树莓派自带以太网接口和Wifi模块，可以通过网线或Wifi连接网络。但是由于我家里的网络是电信的光纤网络，用的是电信配的路由器，各个终端都是通过Wifi或网线连到这个路由上，因此各个终端相当于处于局域网，外网无法通过ip直接访问到内网的树莓派设备，这样如果我在树莓派上搭建一个服务器，外网就无法访问。</p>
<p>一般这种问题，只需要在路由器上设置一下<a href="http://www.hrtl.com.cn/News_398.aspx" target="_blank" rel="external">端口映射</a>就可通过外网访问内网主机了，但是电信配的这个路由器不支持设置端口映射（吐槽一下，电信自带的路由器简直弱爆了），所有就没办法通过设置路由器的方法解决。</p>
<p>经过一番探索，找了一种可行的方案：<a href="http://www.nat123.com/" target="_blank" rel="external">nat123</a>。nat123是一家专业提供端口映射和域名解析的网站，下面我就详细介绍一下如何使用nat123来实现外网访问内网树莓派设备。</p>
<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><h3 id="第一步-准备工作"><a href="#第一步-准备工作" class="headerlink" title="第一步 准备工作"></a>第一步 准备工作</h3><p>确保在内网环境下可以通过ssh访问树莓派，如何在树莓派上配置ssh，可以参考<a href="http://www.itnose.net/detail/6109563.html" target="_blank" rel="external">这篇文章</a></p>
<h3 id="第二步-注册nat123"><a href="#第二步-注册nat123" class="headerlink" title="第二步 注册nat123"></a>第二步 注册nat123</h3><p>打开<a href="http://www.nat123.com/" target="_blank" rel="external">nat123</a>官网，点击右上角的注册按钮完成注册</p>
<h3 id="第三步-在树莓派上安装nat123-Linux版"><a href="#第三步-在树莓派上安装nat123-Linux版" class="headerlink" title="第三步 在树莓派上安装nat123 Linux版"></a>第三步 在树莓派上安装nat123 Linux版</h3><p>打开树莓派，按照<a href="http://www.nat123.com/pages_17_600.jsp" target="_blank" rel="external">这篇文章</a>的内容安装并启动相关软件。这里注意要根据你树莓派上的操作系统选择不同的安装方式，如果安装的官方操作系统Raspbian，应该选用Debian系统的安装方式。</p>
<h3 id="第四步-配置端口映射"><a href="#第四步-配置端口映射" class="headerlink" title="第四步 配置端口映射"></a>第四步 配置端口映射</h3><p>登录<a href="http://www.nat123.com/" target="_blank" rel="external">nat123</a>，在左侧的用户中心点击“端口映射添加”，如下图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/7855931f84f019009241b787d7c35f87.png" alt="1"></p>
<p>应用类型选择“其他（非网站）”，这里我要实现的是通过ssh访问树莓派，所有不是80端口，具体应该根据自己的需求选择应用类型，可以参考<a href="http://www.nat123.com/Pages_8_570.jsp" target="_blank" rel="external">这篇文章</a>。</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/d784b452f4e1a71ef9555fd783b95386.png" alt="2"></p>
<p>下面解释一下每一项的含义：</p>
<ul>
<li>应用名称：随便起，这里因为是用于ssh连接的，所以起名为ssh</li>
<li>内网端口：内网应用的端口，ssh访问默认端口为22，如果是其他服务，这里的端口号应该填相应服务的端口号，例如，ftp服务默认端口号为21，http服务默认端口80等。</li>
<li>内网地址：即树莓派在内网的ip地址，可以通过<code>ifconfig</code>命令查看</li>
<li>外网端口：自动生成，要记住这个端口号，待会链接是要用到</li>
<li>外网域名：自动生成，这就是外网要访问的地址</li>
</ul>
<p>然后点击“确认保存”，这里需要认证，认证需要收费（30￥），付款完成后，再次点击“确认保存”，就可以保存成功。可以在左侧的“端口映射列表”里查看和修改添加的端口映射。</p>
<p>这样就完成了端口映射的添加。</p>
<h3 id="第五步-外网访问"><a href="#第五步-外网访问" class="headerlink" title="第五步 外网访问"></a>第五步 外网访问</h3><p>这时就已经可以通过外网访问了，在外网环境下打开终端，输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh pi@45067491.nat123.net -p 22996</div></pre></td></tr></table></figure>
<p>然后输入密码，就可以通过ssh访问树莓派了。这里”pi”是你在树莓派里的用户名，-p参数是刚才的端口号。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上就是我使用nat123实现外网访问内网树莓派设备的这个过程。整个过程并不复杂，但是我在进行的过程中还是磕磕绊绊折腾了好久才完全整好，不过这个过程中还是学到了不少的东西。</p>
<p>由于水平有限，如果上文中有不正确的地方，欢迎大家交流指正。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-cn/%E6%A0%91%E8%8E%93%E6%B4%BE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;树莓派&lt;/a&gt;是一款基于Linux的单板机电脑。最近入手了一块，打算作为L
    
    </summary>
    
      <category term="树莓派" scheme="http://liujinlongxa.com/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="树莓派" scheme="http://liujinlongxa.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="SSH" scheme="http://liujinlongxa.com/tags/SSH/"/>
    
      <category term="网络" scheme="http://liujinlongxa.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Swift3中的预处理宏</title>
    <link href="http://liujinlongxa.com/2016/10/28/Swift3%E4%B8%AD%E7%9A%84%E9%A2%84%E5%A4%84%E7%90%86%E5%AE%8F/"/>
    <id>http://liujinlongxa.com/2016/10/28/Swift3中的预处理宏/</id>
    <published>2016-10-28T09:18:57.000Z</published>
    <updated>2017-03-01T06:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Swift中也可以使用预处理宏，只不过和ObjectiveC有点不一样，下面详细说明一下。</p>
<ul>
<li>Swift中取消了#define，建议使用全局常量替换宏定义</li>
<li>Swift中仍然可以使用<code>#if, #elseif, #endif</code>等宏，注意，Swift中是<code>#elseif</code>，而在OC中是<code>#elif</code>。还有<code>#if</code>和<code>#elseif</code>后面的判断条件必须是Bool类型的。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#<span class="keyword">if</span> <span class="literal">false</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"aaaa"</span>)</div><div class="line">#elseif <span class="literal">true</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"bbbb"</span>)</div><div class="line">#<span class="keyword">else</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"cccc"</span>)</div><div class="line">#endif</div></pre></td></tr></table></figure>
<ul>
<li>Swift中取消了<code>__FUNCTION__, __FILE__, __LINE__</code>，分别改为了<code>#function, #file, #line</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(#file)</div><div class="line"><span class="built_in">print</span>(#line)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">function1</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(#function)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swift中也可以使用预处理宏，只不过和ObjectiveC有点不一样，下面详细说明一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Swift中取消了#define，建议使用全局常量替换宏定义&lt;/li&gt;
&lt;li&gt;Swift中仍然可以使用&lt;code&gt;#if, #elseif, #endif
    
    </summary>
    
      <category term="Swift" scheme="http://liujinlongxa.com/categories/Swift/"/>
    
    
      <category term="Swift" scheme="http://liujinlongxa.com/tags/Swift/"/>
    
      <category term="预处理宏" scheme="http://liujinlongxa.com/tags/%E9%A2%84%E5%A4%84%E7%90%86%E5%AE%8F/"/>
    
  </entry>
  
  <entry>
    <title>给多个Target添加CocoaPods</title>
    <link href="http://liujinlongxa.com/2016/10/26/%E7%BB%99%E5%A4%9A%E4%B8%AATarget%E6%B7%BB%E5%8A%A0CocoaPods/"/>
    <id>http://liujinlongxa.com/2016/10/26/给多个Target添加CocoaPods/</id>
    <published>2016-10-26T14:25:04.000Z</published>
    <updated>2017-03-01T06:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>一般我们使用CocoaPods进行依赖管理时，如果项目里只有一个Target，则Podfile文件的格式应该是：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">target <span class="string">'ZipApp'</span> <span class="keyword">do</span>  <span class="comment"># ZipApp为Target名称</span></div><div class="line">  pod <span class="string">'SSZipArchive'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>如果项目中有多个Target，可以定义多个这样的block，如下：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">target <span class="string">'ZipApp'</span> <span class="keyword">do</span>  <span class="comment"># ZipApp为Target名称</span></div><div class="line">  pod <span class="string">'SSZipArchive'</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">target <span class="string">'ZipAppTest'</span> <span class="keyword">do</span>  <span class="comment"># ZipAppTest为另一个Target名称</span></div><div class="line">  pod <span class="string">'SSZipArchive'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>如果多个Target的依赖的库都是一样的，没有必要每一个Target都把所有库都写一遍，可以定义一个函数，写法如下：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">common_pods</span></span></div><div class="line">    pod <span class="string">'SSZipArchive'</span></div><div class="line">    pod <span class="string">'AFNetworking'</span></div><div class="line">    pod <span class="string">'JSPatch'</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">target <span class="string">'ZipApp'</span> <span class="keyword">do</span>  <span class="comment"># ZipApp即使Target名称</span></div><div class="line">  common_pods</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">target <span class="string">'ZipAppTest'</span> <span class="keyword">do</span></div><div class="line">    common_pods</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h3 id="其他的用法"><a href="#其他的用法" class="headerlink" title="其他的用法"></a>其他的用法</h3><p>如果多个Target有嵌套关系，即一个Target是另一个Target的父Target，则可以写成以下形式：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">target <span class="string">'ZipApp'</span> <span class="keyword">do</span></div><div class="line">  pod <span class="string">'SSZipArchive'</span></div><div class="line"></div><div class="line">  target <span class="string">'ZipAppTests'</span> <span class="keyword">do</span></div><div class="line">    inherit! <span class="symbol">:search_paths</span> <span class="comment"># 这句话表示子Target继承了父Target包含的pod，即ZipAppTests这个Target里包含了SSZipArchive和Nimble两个pod</span></div><div class="line">    pod <span class="string">'Nimble'</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>如果一个Workspace里包含了多个Project，并且每一个Project都有不同的Target，则可以使用以下形式定义多个Project的Target：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">target <span class="string">'Target1'</span> <span class="keyword">do</span></div><div class="line">  project <span class="string">'Project1'</span></div><div class="line">  pod <span class="string">'AFNetworking'</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">target <span class="string">'Target2'</span> <span class="keyword">do</span></div><div class="line">  project <span class="string">'Project2'</span></div><div class="line">  pod <span class="string">'JSPatch'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h3&gt;&lt;p&gt;一般我们使用CocoaPods进行依赖管理时，如果项目里只有一个Target，则Podfile文件的格式应该是：&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://liujinlongxa.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Target" scheme="http://liujinlongxa.com/tags/Target/"/>
    
      <category term="CocoaPods" scheme="http://liujinlongxa.com/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>如何获取WebView的UserAgent</title>
    <link href="http://liujinlongxa.com/2016/10/25/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96WebView%E7%9A%84UserAgent/"/>
    <id>http://liujinlongxa.com/2016/10/25/如何获取WebView的UserAgent/</id>
    <published>2016-10-25T03:46:04.000Z</published>
    <updated>2017-03-01T06:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目中用到了WebView的UserAgent，可以通过以下方式获取到：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIWebView</span>* webView = [[<span class="built_in">UIWebView</span> alloc] init];</div><div class="line"><span class="built_in">NSString</span>* secretAgent = [webView stringByEvaluatingJavaScriptFromString:<span class="string">@"navigator.userAgent"</span>];</div></pre></td></tr></table></figure>
<p>如果是WKWebView，可以通过以下方式获取</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">WKWebView</span> *webView = [[<span class="built_in">WKWebView</span> alloc] init];</div><div class="line">[webView evaluateJavaScript:<span class="string">@"navigator.userAgent"</span> completionHandler:^(<span class="keyword">id</span> _Nullable userAgent, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"userAgent: %@"</span>, userAgent);</div><div class="line">&#125;];</div><div class="line"><span class="keyword">self</span>.webView = webView; <span class="comment">// 注意，一定要对webView进行强引用</span></div></pre></td></tr></table></figure>
<p>获取到的值的为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Mozilla/5.0 (iPhone; CPU iPhone OS 10_0_1 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) Mobile/14A403</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中用到了WebView的UserAgent，可以通过以下方式获取到：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div
    
    </summary>
    
      <category term="iOS Tips" scheme="http://liujinlongxa.com/categories/iOS-Tips/"/>
    
    
      <category term="其他" scheme="http://liujinlongxa.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>iOS10无法获取IDFA的问题</title>
    <link href="http://liujinlongxa.com/2016/10/18/iOS10%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96IDFA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://liujinlongxa.com/2016/10/18/iOS10无法获取IDFA的问题/</id>
    <published>2016-10-18T02:17:44.000Z</published>
    <updated>2017-03-01T06:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>iOS10上，如果用户开启了“限制广告跟踪”选项（设置-&gt;隐私-&gt;广告），则在使用<code>[[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString]</code>方法获取IDFA时会返回全部是0，如下：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/13bbfe746dacb7c156cac2aaac5b2c0d.png" alt="1"></p>
<p>有两种解决方案：</p>
<p>第一种方法是通过<code>isAdvertisingTrackingEnabled</code>属性判断是否可以返回正确的IDFA，如果返回为NO，则可以提示用户去设置中关闭限制广告跟踪。代码如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *idfa = <span class="literal">nil</span>;</div><div class="line"><span class="keyword">if</span> ([[ASIdentifierManager sharedManager] isAdvertisingTrackingEnabled]) &#123;</div><div class="line">    idfa = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 弹窗提示用户关闭限制广告跟踪</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外一种更好的方法是使用第三方库获取IDFA，这里推荐两个第三方库：<a href="https://github.com/ylechelle/OpenIDFA" target="_blank" rel="external">OpenIDFA</a>和<a href="https://github.com/youmi/SimulateIDFA" target="_blank" rel="external">SimulateIDFA</a>，个人更推荐SimulateIDFA，因为他的重复率更低。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS10上，如果用户开启了“限制广告跟踪”选项（设置-&amp;gt;隐私-&amp;gt;广告），则在使用&lt;code&gt;[[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString]&lt;/code&gt;方法获取I
    
    </summary>
    
      <category term="iOS Tips" scheme="http://liujinlongxa.com/categories/iOS-Tips/"/>
    
    
      <category term="IDFA" scheme="http://liujinlongxa.com/tags/IDFA/"/>
    
  </entry>
  
  <entry>
    <title>获取本地化的APP版本描述信息</title>
    <link href="http://liujinlongxa.com/2016/10/09/%E8%8E%B7%E5%8F%96%E6%9C%AC%E5%9C%B0%E5%8C%96%E7%9A%84APP%E7%89%88%E6%9C%AC%E6%8F%8F%E8%BF%B0%E4%BF%A1%E6%81%AF/"/>
    <id>http://liujinlongxa.com/2016/10/09/获取本地化的APP版本描述信息/</id>
    <published>2016-10-09T15:25:15.000Z</published>
    <updated>2017-03-01T06:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>在制作APP升级提示框时，需要APP的最新版本信息，苹果提供了”<a href="http://itunes.apple.com/lookup?id=123123&quot;接口用于查询AppStore上的APP的详细信息，参数id表示的是应用程序的AppId。" target="_blank" rel="external">http://itunes.apple.com/lookup?id=123123&quot;接口用于查询AppStore上的APP的详细信息，参数id表示的是应用程序的AppId。</a></p>
<p>如果在iTunesConnect上对应用的版本描述信息做了本地化，上述接口只会返回首选语言的描述信息，如果要返回特定语言的描述信息，还要加上两个参数:</p>
<ul>
<li>country: 国家参数，CN表示中国，US表示美国，国家代码可以在<a href="https://zh.wikipedia.org/wiki/ISO_3166-1" target="_blank" rel="external">这里</a>找到</li>
<li>lang: 语言参数，zh_cn表示中文，zh_tw表示繁体中文，en_us表示美国英国，语言编码可以参考<a href="https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9F%9F%E8%AE%BE%E7%BD%AE" target="_blank" rel="external">维基百科</a></li>
</ul>
<p>例如：</p>
<ul>
<li>要获取中文的描述信息，应该调用<a href="http://itunes.apple.com/lookup?id=123123&amp;country=CN&amp;lang=zh_cn" target="_blank" rel="external">http://itunes.apple.com/lookup?id=123123&amp;country=CN&amp;lang=zh_cn</a></li>
<li>要获取繁体中文的描述信息，应该调用<a href="http://itunes.apple.com/lookup?id=123123&amp;country=TW&amp;lang=zh_tw" target="_blank" rel="external">http://itunes.apple.com/lookup?id=123123&amp;country=TW&amp;lang=zh_tw</a></li>
<li>要获取英文的描述信息，应该调用<a href="http://itunes.apple.com/lookup?id=123123&amp;country=US&amp;lang=en_us" target="_blank" rel="external">http://itunes.apple.com/lookup?id=123123&amp;country=US&amp;lang=en_us</a></li>
</ul>
<p>参考资料：</p>
<p><a href="https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9F%9F%E8%AE%BE%E7%BD%AE" target="_blank" rel="external">语言区域</a><br><a href="https://zh.wikipedia.org/wiki/ISO_3166-1" target="_blank" rel="external">ISO_3166-1</a><br><a href="https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/" target="_blank" rel="external">iTunes Affiliate Resources</a><br><a href="http://blog.hoachuck.biz/blog/2012/07/01/playing-around-with-app-store-meta-data/" target="_blank" rel="external">Playing Around With App Store Meta Data</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在制作APP升级提示框时，需要APP的最新版本信息，苹果提供了”&lt;a href=&quot;http://itunes.apple.com/lookup?id=123123&amp;quot;接口用于查询AppStore上的APP的详细信息，参数id表示的是应用程序的AppId。&quot; targ
    
    </summary>
    
      <category term="iOS Tips" scheme="http://liujinlongxa.com/categories/iOS-Tips/"/>
    
    
      <category term="本地化" scheme="http://liujinlongxa.com/tags/%E6%9C%AC%E5%9C%B0%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>iOS多环境配置实践</title>
    <link href="http://liujinlongxa.com/2016/10/07/iOS%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%AE%9E%E8%B7%B5/"/>
    <id>http://liujinlongxa.com/2016/10/07/iOS多环境配置实践/</id>
    <published>2016-10-07T02:04:43.000Z</published>
    <updated>2017-03-01T06:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在移动客户端开发过程中，服务器一般都会提供多个环境的API接口，例如测试环境(TEST_ENV)，发布环境(RELEASE_ENV)，预发布环境(PRERELEASE_ENV)等，我们客户端在打包的时候需要在不同的阶段打不同环境的包，最简单的做法就是在代码里直接修改URL来切换不同的环境。但是这种做法太Low了，而且也不易于使用脚本自动打包。本文的主要内容就是介绍一种不修改代码达到配置不同环境的方法。</p>
<h2 id="明确需求"><a href="#明确需求" class="headerlink" title="明确需求"></a>明确需求</h2><p>在开始主要内容之前，先明确一下需求：</p>
<ol>
<li>服务器有三个环境，测试环境(TEST_ENV)，发布环境(RELEASE_ENV)，预发布环境(PRERELEASE_ENV)，要求要很方便的实现在三个不同环境之间自由切换</li>
<li>代码中大量使用了DEBUG宏，因此要求每个环境都应该区分DEBUG和RELEASE，即在任一环境下都可能需要打DEBUG包或RELEASE包</li>
</ol>
<p>为此，我编写了一份测试代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#if TEST_ENV // 测试环境</div><div class="line">#if DEBUG</div><div class="line">    NSLog(@&quot;hello test env debug&quot;);</div><div class="line">#else</div><div class="line">    NSLog(@&quot;hello test env release&quot;);</div><div class="line">#endif</div><div class="line">#endif</div><div class="line"></div><div class="line">#if RELEASE_ENV // 发布环境</div><div class="line">#if DEBUG</div><div class="line">    NSLog(@&quot;hello release env debug&quot;);</div><div class="line">#else</div><div class="line">    NSLog(@&quot;hello release env release&quot;);</div><div class="line">#endif</div><div class="line">#endif</div><div class="line"></div><div class="line">#if PRERELEASE_ENV // 预发布环境</div><div class="line">#if DEBUG</div><div class="line">    NSLog(@&quot;hello pre-relase env debug&quot;);</div><div class="line">#else</div><div class="line">    NSLog(@&quot;hello pre-relase env release&quot;);</div><div class="line">#endif</div><div class="line">#endif</div></pre></td></tr></table></figure>
<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><h3 id="1-为每一个环境创建一个Target"><a href="#1-为每一个环境创建一个Target" class="headerlink" title="1. 为每一个环境创建一个Target"></a>1. 为每一个环境创建一个Target</h3><p>创建项目后，项目本身就会有一个Target（如果不了解Target的概念可以看一下<a href="https://developer.apple.com/library/content/featuredarticles/XcodeConcepts/Concept-Targets.html" target="_blank" rel="external">这篇官方文档</a>）,我们可以把这个Target就作为某一个环境的Target，这里我们把它作为发布环境的Target，然后还需要创建测试环境和预发布环境的Target，方法如下：</p>
<p>在项目配置界面左侧，选中Target，点击右键，选择”Duplicate”，复制一个新的Target，如下图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/ec6ceac9d953c320c0cbf0bfe55ee361.png" alt="1"></p>
<p>然后在弹出的菜单中点击”Duplicate Only”</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/463b4e2b32269ab485d9f160315e1d75.png" alt="2"></p>
<p>这样就创建好了一个新的Target。新的Target的默认名称为”项目名称 copy”，即”Test1007 copy”，单击新创建的Target，修改Target名称为”Test1007_Test”，将这个Target作为测试环境的Target。</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/4e99d383134b80176fedbe7853327b6f.png" alt="3"></p>
<p>创建完Target后，XCode会自动为这个Target创建一个Scheme，为了方便起见，也将这个Scheme的名称修改为”Test1007_Test”，方法是在左上角点击”Manage Schemes…”，单机要修改名称的Scheme，即可修改Scheme的名称。</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/32c4abd9100ed10efbebda4f876c5939.png" alt="4"></p>
<p>同样的方法，在创建一个名为”Test1007_Prerelease”的Target作为预发布环境的Target。</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/640b7eebdbb792330544b5211110f278.png" alt="5"></p>
<h3 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2. 配置环境变量"></a>2. 配置环境变量</h3><p>配置环境变量，就是添加TEST_ENV，RELEASE_ENV和PRERELEASE_ENV这三个宏，这一步在ObjectiveC下和Swift是不一样的，这里会分别讲解</p>
<h4 id="ObjectiveC下配置环境变量"><a href="#ObjectiveC下配置环境变量" class="headerlink" title="ObjectiveC下配置环境变量"></a>ObjectiveC下配置环境变量</h4><p>在项目配置界面选择发布环境的Target “Test1007”，点击Build Settings，找到Preprocessor Macros，在Debug和Release下都添加环境变量”RELEASE_ENV=1”，如图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/e685c55dc756723ecd8a2d513efca11e.png" alt="6"></p>
<p>添加完成后结果如图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/60989466ad3f7b1b1e272210c2fafe8d.png" alt="7"></p>
<p>这样就为发布环境添加好了”RELEASE_ENV”宏。</p>
<p>同样的方法，分别在Target “Test1007_Test”和”Test1007_Prerelease”添加TEST_ENV和PRERELEASE_ENV这两个宏。</p>
<h4 id="Swift下配置环境变量"><a href="#Swift下配置环境变量" class="headerlink" title="Swift下配置环境变量"></a>Swift下配置环境变量</h4><p>在项目配置界面选择发布环境的Target “Test1007”，点击Build Settings，找到Other Swift Flags，在Debug和Release下都添加环境变量”-D RELEASE_ENV”，如图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/d7ec2f7e6073166d15fc64d488b42fcb.png" alt="8"></p>
<p>添加完成后如图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/2697bee36a116092b03257cfca9bf774.png" alt="9"></p>
<p>同样的方法，分别在Target “Test1007_Test”和”Test1007_Prerelease”下添加TEST_ENV和PRERELEASE_ENV这两个宏。</p>
<p>这样就完成了环境变量的配置。</p>
<h3 id="3-为不同环境的包配置不同的名称，BundleId和图标"><a href="#3-为不同环境的包配置不同的名称，BundleId和图标" class="headerlink" title="3. 为不同环境的包配置不同的名称，BundleId和图标"></a>3. 为不同环境的包配置不同的名称，BundleId和图标</h3><p>其实到这一步就已经完成了不同环境的配置，要切换环境，只需要切换左上角的Scheme就可以了。为了更好的区分不同环境下的包，可以给每个环境配置不同的App名称，BundleId和App图标，方法如下：</p>
<p>在项目配置界面选中一个Target，通过修改Display Name和Bundle Identifier可以为不同环境的包设置不同的App名称和BundleId。</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/98681390ae672ce58b2a541c3068e4c6.png" alt="10"></p>
<p>要设置不同的图标，需要在Build Settings里找到”Asset Calalog App Icon Set Name”，其默认值是AppIcon，可以为不同Target设置不同的Icon Set Name，然后在Assets.xcassets中添加对应的Image Set即可。</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/a9fa6a0db2bccb6d5945fe5c3f4d8360.png" alt="11"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文是通过多个Target来实现多环境配置的，其实除了本文介绍的方法，还有其他方法可以实现多环境配置，具体可以参考<a href="http://www.jianshu.com/p/83b6e781eb51" target="_blank" rel="external">这篇文章</a>。</p>
<p>有了多环境配置，就可以很方便的实现多环境自动打包，如果在加入持续集成系统（例如jenkins等），就可以非常优雅的打包。这个以后有时间会专门写一篇博客来介绍相关内容。</p>
<p>参考资料：<br><a href="http://www.jianshu.com/p/83b6e781eb51" target="_blank" rel="external">手把手教你给一个iOS app配置多个环境变量</a><br><a href="http://www.cocoachina.com/ios/20151023/13869.html" target="_blank" rel="external">iOS开发必备–环境变量配置(Debug &amp; Release)</a><br><a href="http://kevindelord.io/2016/06/08/project-configuration/" target="_blank" rel="external">Xcode Project Configuration</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在移动客户端开发过程中，服务器一般都会提供多个环境的API接口，例如测试环境(TEST_ENV)，发布环境(RELEASE_ENV)，预发布
    
    </summary>
    
      <category term="iOS开发" scheme="http://liujinlongxa.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Target" scheme="http://liujinlongxa.com/tags/Target/"/>
    
      <category term="Scheme" scheme="http://liujinlongxa.com/tags/Scheme/"/>
    
  </entry>
  
  <entry>
    <title>使用xUnique遇到了的问题</title>
    <link href="http://liujinlongxa.com/2016/10/04/%E4%BD%BF%E7%94%A8xUnique%E9%81%87%E5%88%B0%E4%BA%86%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://liujinlongxa.com/2016/10/04/使用xUnique遇到了的问题/</id>
    <published>2016-10-04T14:24:27.000Z</published>
    <updated>2017-03-01T06:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>xUnique是一个用来对iOS向的<em>.xcodeproj文件进行排序的工具，它可以降低</em>.xcodeproj文件冲突的概率。其实质是一个Git Hook脚本，在提交一个Commit时，如果*.xcodeproj文件有修改，则会对文件进行重新排序。</p>
<p>最近在使用时发现了一个问题，当我执行“pod install”安装第三方库时，在进行提交时会报”File ‘project.pbxproj’ is broken. Cannot find PBXProject name.”，从字面意思看’project.pbxproj’文件损坏，但是进入*.xcodeproj文件夹，双击‘project.pbxproj’，发现是可以打开的，并没有问题。</p>
<p>最后通过查找资料，找到了原因，具体原因是由于在执行‘pod install’后，CocoaPods会重写‘project.pbxproj’文件，并且改变了它的格式，导致xUnique无法正确读取’project.pbxproj’文件。</p>
<p>解决方法是：让xcode重新生成‘project.pbxproj’，具体步骤如下：</p>
<ol>
<li>先关闭xUnique，然后提交代码。关闭xUnique的方法是打开“&lt;项目仓库根目录&gt;/.git/hooks/pre-commit”文件，注释掉xUnique有关的内容</li>
<li>做出任意一个可以导致’project.pbxproj’修改的修改，例如修改版本号，创建文件等，这样xcode会重写’project.pbxproj’文件</li>
<li>打开xUnique，提交代码，这时xUnique就可以识别’project.pbxproj’文件了</li>
</ol>
<p>参看文档：<br><a href="https://github.com/truebit/xUnique/issues/34" target="_blank" rel="external">File ‘project.pbxproj’ is broken. Cannot find PBXProject name.</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;xUnique是一个用来对iOS向的&lt;em&gt;.xcodeproj文件进行排序的工具，它可以降低&lt;/em&gt;.xcodeproj文件冲突的概率。其实质是一个Git Hook脚本，在提交一个Commit时，如果*.xcodeproj文件有修改，则会对文件进行重新排序。&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="iOS Tips" scheme="http://liujinlongxa.com/categories/iOS-Tips/"/>
    
    
      <category term="其他" scheme="http://liujinlongxa.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>使用代码删除约束要注意的地方</title>
    <link href="http://liujinlongxa.com/2016/09/12/%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%A0%81%E5%88%A0%E9%99%A4%E7%BA%A6%E6%9D%9F%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/"/>
    <id>http://liujinlongxa.com/2016/09/12/使用代码删除约束要注意的地方/</id>
    <published>2016-09-12T15:17:44.000Z</published>
    <updated>2017-03-01T06:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用代码删除特定约束的正确姿势：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (IOS8_OR_LATER) &#123;</div><div class="line">    <span class="comment">// iOS8之后删除约束的方法</span></div><div class="line">    <span class="keyword">self</span>.authorLabelRightConstraint.active = <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// iOS8之前删除约束的方法</span></div><div class="line">    [<span class="keyword">self</span> removeConstraint:<span class="keyword">self</span>.authorLabelRightConstraint];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意删除约束的方法在iOS8之前和之后是不一样的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用代码删除特定约束的正确姿势：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2
    
    </summary>
    
      <category term="iOS Tips" scheme="http://liujinlongxa.com/categories/iOS-Tips/"/>
    
    
      <category term="Autolayout" scheme="http://liujinlongxa.com/tags/Autolayout/"/>
    
  </entry>
  
  <entry>
    <title>做模糊效果时遇到的问题</title>
    <link href="http://liujinlongxa.com/2016/08/30/%E5%81%9A%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://liujinlongxa.com/2016/08/30/做模糊效果时遇到的问题/</id>
    <published>2016-08-30T14:51:53.000Z</published>
    <updated>2017-03-01T06:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做图片模糊效果时遇到了一个很奇怪的问题，在iPhone6/iPhone6s上显示的模糊效果如下：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/4661eedc0a33e9c4535d95a005bde5d2.png" alt="1"></p>
<p>但是在iPhone6 plus和iPhone6s plus上的模糊效果就如下图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/e31355553287234ae1b78b6ea88389ac.png" alt="2"></p>
<p>这明显效果不对，好像没有模糊一样。于是Google一些资料，终于找到了解决方法，解决方法是，在6Plus上不能设置过大的模糊半径，如果模糊半径过大，就会出现上图的效果。这和我使用的”UIImage+ImageEffects.h”也有关。</p>
<p>原先设置的模糊半径为52，现在改成了在6Plus和6sPlus上是45，在6和6s上还是52，这样就没问题了。</p>
<p>参考资料：</p>
<p><a href="http://stackoverflow.com/questions/26002970/applyblurwithradius-working-on-iphone-6-not-6-uiimageimageeffects" target="_blank" rel="external">applyBlurWithRadius working on iPhone 6, not 6+ (UIImage+ImageEffects)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做图片模糊效果时遇到了一个很奇怪的问题，在iPhone6/iPhone6s上显示的模糊效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xn88v.com1.z0.glb.clouddn.com/4661eedc0a33e9c4535d95a005bde5
    
    </summary>
    
      <category term="iOS Tips" scheme="http://liujinlongxa.com/categories/iOS-Tips/"/>
    
    
      <category term="其他" scheme="http://liujinlongxa.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>使用Safair调试JS</title>
    <link href="http://liujinlongxa.com/2016/08/30/%E4%BD%BF%E7%94%A8Safair%E8%B0%83%E8%AF%95JS/"/>
    <id>http://liujinlongxa.com/2016/08/30/使用Safair调试JS/</id>
    <published>2016-08-30T13:46:33.000Z</published>
    <updated>2017-03-01T06:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>iOS项目中经常会用到Native界面和H5界面互相调用的情况，方法就是使用JavaScriptCore框架直接在原生界面中调用JS代码。如果JS代码较长，调试起来就会比较麻烦，这里介绍一种方法，可以让你轻松调试JS。</p>
<p>首先，打开Safari，打开偏好设置（快捷键Cmd+,），在Advanced中选中”Show Develop menu in menu bar”，如下图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/500ac2228a67a84dd4c20e73f104a560.png" alt="1"></p>
<p>这样菜单栏就会出现一个Develop菜单，点击菜单Develop-&gt;Simulator-&gt;Automatically Show Web Inspector For JSContexts</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/211795a2560cf0bc3973a5d778d96343.png" alt="2"></p>
<p>然后使用模拟器运行项目，当运行到JS代码时，就会自动启动调试器，如图：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/19c6bf7d6bce0e9b54f289ccc9025ecc.png" alt="3"></p>
<p>和XCode一样，你可以打断点，当JS运行到这一句时就会进入断点</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/f6b607a7a949df00b9f2e20f11e7b29a.png" alt="4"></p>
<p>当进入断点后，还可以打印出相应的局部变量</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/993f4e504f25bc37a79cc1f6ffd1a9ca.png" alt="5"></p>
<p>以上就是使用Safari调试JS的方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS项目中经常会用到Native界面和H5界面互相调用的情况，方法就是使用JavaScriptCore框架直接在原生界面中调用JS代码。如果JS代码较长，调试起来就会比较麻烦，这里介绍一种方法，可以让你轻松调试JS。&lt;/p&gt;
&lt;p&gt;首先，打开Safari，打开偏好设置（快
    
    </summary>
    
      <category term="iOS Tips" scheme="http://liujinlongxa.com/categories/iOS-Tips/"/>
    
    
      <category term="其他" scheme="http://liujinlongxa.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Mac下生成RSA密钥对要注意的问题</title>
    <link href="http://liujinlongxa.com/2016/08/25/Mac%E4%B8%8B%E7%94%9F%E6%88%90RSA%E5%AF%86%E9%92%A5%E5%AF%B9%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://liujinlongxa.com/2016/08/25/Mac下生成RSA密钥对要注意的问题/</id>
    <published>2016-08-25T15:50:06.000Z</published>
    <updated>2017-03-01T06:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>生成RSA密钥一般使用的Openssl，方法如下：</p>
<p>在终端输入命令openssl然后敲回车，进入openssl命令输入模式，如下：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/d0eff7b11f3bb040e28e46de5393d9d2.png" alt="1"></p>
<p>然后输入一下三行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">genrsa -out rsa_private_key.pem 1024</div><div class="line">pkcs8 -topk8 -in rsa_private_key.pem -out pkcs8_rsa_private_key.pem -nocrypt</div><div class="line">rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</div></pre></td></tr></table></figure>
<p>然后输入exit退出openssl命令输入模式，这样会在当前目录生成三个文件，如下：</p>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/980dc450a7d1f4db0759d42ac882f54a.png" alt="2"></p>
<p>其中：</p>
<ul>
<li>rsa_private_key.pem为私钥</li>
<li>rsa_public_key.pem为公钥</li>
<li>pkcs8_rsa_private_key.pem为PKCS#8编码的私钥</li>
</ul>
<p>公钥没有问题，主要是私钥，私钥有两个，两个有什么区别，到底该用哪一个呢？</p>
<p>主要区别在于：</p>
<ul>
<li>rsa_private_key.pem为PKCS#1编码，只包含RSA的密钥信息，是以”—–BEGIN RSA PRIVATE KEY—–”开头，以”—–END RSA PRIVATE KEY—–”结尾，如下图：</li>
</ul>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/9927f538bea6e031960a0a908076ccdd.png" alt="3"></p>
<ul>
<li>pkcs8_rsa_private_key.pem为PKCS#8编码，除了包含RSA密钥信息外，还包含一些附加信息，例如version和算法等，是以”—–BEGIN PRIVATE KEY—–”开头，以”—–END PRIVATE KEY—–”结尾的，如下图：</li>
</ul>
<p><img src="http://7xn88v.com1.z0.glb.clouddn.com/b98831c564629c062c9bfcb5f7868625.png" alt="4"></p>
<p>Mac默认生成的是PKCS#1编码的私钥，而有的系统生成私钥是PKCS#8编码，具体用哪个这要看你的加密代码里是否对附加信息进行了校验判断，如果进行了校验，则应该使用PKCS#8编码的私钥，否则应该使用PKCS#1编码的私钥。</p>
<p>我使用的是<a href="https://github.com/ideawu/Objective-C-RSA" target="_blank" rel="external">这个第三方库</a>进行加密解密的，里面对附加信息进行了校验，所以应该使用PKCS#8编码的密钥。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/ideawu/Objective-C-RSA" target="_blank" rel="external">Objective-C-RSA</a><br><a href="https://github.com/ideawu/Objective-C-RSA/issues/15" target="_blank" rel="external">Objective-C-RSA Issuse #15</a><br><a href="http://www.tuicool.com/articles/Rbu6zm" target="_blank" rel="external">openssl生成RSA格式，并转为pkcs8格式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生成RSA密钥一般使用的Openssl，方法如下：&lt;/p&gt;
&lt;p&gt;在终端输入命令openssl然后敲回车，进入openssl命令输入模式，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xn88v.com1.z0.glb.clouddn.com/d0eff7b11
    
    </summary>
    
      <category term="其他" scheme="http://liujinlongxa.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="加密解密" scheme="http://liujinlongxa.com/tags/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    
  </entry>
  
</feed>
