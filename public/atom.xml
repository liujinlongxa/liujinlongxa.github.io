<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>liujinlongxa的技术博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liujinlongxa.com/"/>
  <updated>2019-10-09T17:35:24.851Z</updated>
  <id>http://liujinlongxa.com/</id>
  
  <author>
    <name>liujinlongxa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Swift标准库：Collection协议</title>
    <link href="http://liujinlongxa.com/2019/10/09/Swift%E6%A0%87%E5%87%86%E5%BA%93%EF%BC%9ACollection%E5%8D%8F%E8%AE%AE/"/>
    <id>http://liujinlongxa.com/2019/10/09/Swift标准库：Collection协议/</id>
    <published>2019-10-09T15:57:12.000Z</published>
    <updated>2019-10-09T17:35:24.851Z</updated>
    
    <content type="html"><![CDATA[<p><code>Collection</code>协议是 Swift 标准库中一个重要的协议，它定义了集合类型的一些特性。与<code>Sequence</code>协议相比，<code>Collection</code>协议拥有以下几个特点：</p><ol><li>不同于<code>Sequence</code>，<code>Collection</code>的元素个数是有限</li><li>可以重复迭代多次，每次<code>for-in</code>迭代都是从头开始迭代。</li><li><code>Collection</code>协议继承自<code>Sequence</code>，可以说<code>Collection</code>是一种特殊的<code>Sequence</code>。</li></ol><p>下面就用一个具体的实例实现一个<code>Collection</code>。</p><p>这里我们定义一个<code>Class</code>用于表示一个班级，<code>Student</code>用于表示班级里的一个学生。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> no: <span class="type">Int</span> <span class="comment">///&lt; 学号</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Class</span>: <span class="title">Collection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> students: [<span class="type">Student</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> startIndex: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> endIndex: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="comment">/// 最大学号为1000</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1000</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(after i: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">subscript</span>(position: <span class="type">Int</span>) -&gt; <span class="type">Student</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> students.first(<span class="keyword">where</span>: &#123;$<span class="number">0</span>.no == position&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="type">Student</span>(name: <span class="string">"aa"</span>, age: <span class="number">10</span>, no: <span class="number">100</span>)</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="type">Student</span>(name: <span class="string">"bb"</span>, age: <span class="number">11</span>, no: <span class="number">101</span>)</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="type">Student</span>(name: <span class="string">"cc"</span>, age: <span class="number">11</span>, no: <span class="number">99</span>)</span><br><span class="line"><span class="keyword">let</span> class1 = <span class="type">Class</span>(students: [s1, s2, s3])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照学号顺序遍历所有学生</span></span><br><span class="line"><span class="keyword">for</span> student <span class="keyword">in</span> class1 &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> student = student <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(student.name) <span class="comment">// cc aa bb</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现<code>Collection</code>协议有几个关键的地方：</p><ol><li><code>startIndex</code>与<code>endIndex</code>两个计算属性的复杂度应该是 O(1)</li><li><code>index(after:)</code>这个方法的实现，针对相同的输入必须要有相同的输出</li></ol><p>以上就是<code>Collection</code>协议的介绍，Swift 标准库中还有很多其他协议，之后会一一介绍。</p><p>参考资料：</p><p><a href="https://developer.apple.com/documentation/swift/collection" target="_blank" rel="noopener">Collection</a><br><a href="https://academy.realm.io/posts/try-swift-soroush-khanlou-sequence-collection/" target="_blank" rel="noopener">Everything You Ever Wanted to Know on Sequence &amp; Collection</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;Collection&lt;/code&gt;协议是 Swift 标准库中一个重要的协议，它定义了集合类型的一些特性。与&lt;code&gt;Sequence&lt;/code&gt;协议相比，&lt;code&gt;Collection&lt;/code&gt;协议拥有以下几个特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不同于
      
    
    </summary>
    
      <category term="Swift" scheme="http://liujinlongxa.com/categories/Swift/"/>
    
    
      <category term="Swift" scheme="http://liujinlongxa.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>如何写出一个优雅的UserDefaults扩展</title>
    <link href="http://liujinlongxa.com/2019/10/07/%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E4%B8%80%E4%B8%AA%E4%BC%98%E9%9B%85%E7%9A%84UserDefaults%E6%89%A9%E5%B1%95/"/>
    <id>http://liujinlongxa.com/2019/10/07/如何写出一个优雅的UserDefaults扩展/</id>
    <published>2019-10-07T03:00:21.000Z</published>
    <updated>2019-10-07T03:20:41.547Z</updated>
    
    <content type="html"><![CDATA[<p><code>UserDefaults</code>是 iOS 中非常常用的一种数据持久化方式，在实际开始中我们一般不会直接使用系统提供的 API 去操作<code>UserDefaults</code>，而是会创建一些扩张，利用扩展的方法来使用<code>UserDefaults</code>。利用 Swift 语言的一些特性，我们可以写出非常优化的<code>UserDefaults</code>扩展。</p><p>利用 Swift 的泛型以及<code>subscript</code>，可以实现一个不需要关心存储数据类型的<code>UserDefaults</code>扩展，代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UserDefaults</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Key</span>&lt;<span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">subscript</span>&lt;<span class="type">T</span>&gt;(key: <span class="type">Key</span>&lt;<span class="type">T</span>&gt;) -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> value(forKey: key.name) <span class="keyword">as</span>? <span class="type">T</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            setValue(newValue, forKey: key.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">subscript</span>&lt;<span class="type">T</span>&gt;(key: <span class="type">Key</span>&lt;<span class="type">T</span>&gt;, <span class="keyword">default</span> defaultProvider: <span class="meta">@autoclosure</span> () -&gt; <span class="type">T</span>) -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> value(forKey: key.name) <span class="keyword">as</span>? <span class="type">T</span> ?? defaultProvider()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            setValue(newValue, forKey: key.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使用另外一个扩展定义 Key</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UserDefaults</span>.<span class="title">Key</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> bookmarks: <span class="type">UserDefaults</span>.<span class="type">Key</span>&lt;[<span class="type">String</span>]&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> .<span class="keyword">init</span>(name: <span class="string">"bookmarks"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> likeCount: <span class="type">UserDefaults</span>.<span class="type">Key</span>&lt;<span class="type">Int</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> .<span class="keyword">init</span>(name: <span class="string">"likeCount"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，在使用时就不需要关心类型了</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UserDefaults</span>.standard[.likeCount] = <span class="number">12</span></span><br><span class="line"><span class="keyword">let</span> bookmarks = <span class="type">UserDefaults</span>.standard[.bookmarks, <span class="keyword">default</span>: []]</span><br></pre></td></tr></table></figure><p>Swift5 中新增了<code>Property Wrappers</code>特性，利用<code>Property Wrappers</code>也可以使得<code>UserDefaults</code>的使用变得非常优雅：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UserDefault</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> key: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> defaultValue: <span class="type">T</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> key: <span class="type">String</span>, defaultValue: <span class="type">T</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.key = key</span><br><span class="line">        <span class="keyword">self</span>.defaultValue = defaultValue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> wrappedValue: <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">UserDefaults</span>.standard.object(forKey: key) <span class="keyword">as</span>? <span class="type">T</span> ?? defaultValue</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="type">UserDefaults</span>.standard.<span class="keyword">set</span>(newValue, forKey: key)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义<code>UserDefaults</code>的 Key</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UserDefaultsConfig</span> </span>&#123;</span><br><span class="line">    @<span class="type">UserDefault</span>(<span class="string">"likeCount"</span>, defaultValue: <span class="number">12</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> likeCount: <span class="type">Int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用时就可以直接赋值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UserDefaultsConfig</span>.likeCount = <span class="number">13</span></span><br></pre></td></tr></table></figure><p>上面两种方式唯一不同的点是，第一种方式每次都可以指定不同的<code>defaultValue</code>，而第二种方式只能在定义属性时指定一次<code>defaultValue</code>，使用时不能动态修改<code>defaultValue</code>。</p><p>个人建议两种方式取其一即可，如果不需要动态修改<code>defaultValue</code>，个人建议使用第二种方式，应为更加简洁明了。</p><p>参考资料：</p><p><a href="https://www.avanderlee.com/swift/property-wrappers/" target="_blank" rel="noopener">Property wrappers to remove boilerplate code in Swift</a><br><a href="https://github.com/DougGregor/swift-evolution/blob/property-wrappers/proposals/0258-property-wrappers.md" target="_blank" rel="noopener">Property Wrappers</a><br><a href="https://www.swiftbysundell.com/articles/the-power-of-subscripts-in-swift/" target="_blank" rel="noopener">The power of subscripts in Swift</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;UserDefaults&lt;/code&gt;是 iOS 中非常常用的一种数据持久化方式，在实际开始中我们一般不会直接使用系统提供的 API 去操作&lt;code&gt;UserDefaults&lt;/code&gt;，而是会创建一些扩张，利用扩展的方法来使用&lt;code&gt;UserDefau
      
    
    </summary>
    
      <category term="Swift" scheme="http://liujinlongxa.com/categories/Swift/"/>
    
    
      <category term="Swift" scheme="http://liujinlongxa.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift标准库：Sequence协议</title>
    <link href="http://liujinlongxa.com/2019/10/06/Swift%E6%A0%87%E5%87%86%E5%BA%93%EF%BC%9ASequence%E5%8D%8F%E8%AE%AE/"/>
    <id>http://liujinlongxa.com/2019/10/06/Swift标准库：Sequence协议/</id>
    <published>2019-10-06T12:36:45.000Z</published>
    <updated>2019-10-09T16:11:22.442Z</updated>
    
    <content type="html"><![CDATA[<p>Sequence 协议为类型提供了迭代访问的能力，凡是实现了 Sequence 的类型，都快进行迭代访问，即使用<code>for-in</code>语句进行访问，标准库中的<code>Array</code>, <code>Dictionary</code>, <code>Set</code>等类型都实现了 Sequence 协议。下面介绍一下自定义类型如何实现 Sequence 协议。</p><p>实现 Sequence 协议的集合有以下两个特点：</p><ol><li>集合的个数可以是有限的也可以是无限的</li><li>只能迭代一次</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Countdown</span>: <span class="title">Sequence</span>, <span class="title">IteratorProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">Int</span>? &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">count</span> == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> &#123; <span class="built_in">count</span> -= <span class="number">1</span> &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">count</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候就可以使用<code>for-in</code>语句：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> threeToGo = <span class="type">Countdown</span>(<span class="built_in">count</span>: <span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> threeToGo &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于更为复杂的例子，需要实现自定义的<code>Iterator</code>，下面的例子中实现了一个自定义的链表，并且自定义了迭代器<code>LinkedListIterator</code>，这样链表就可以使用<code>for-in</code>语句进行访问</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">var</span> e: <span class="type">E</span>?;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">var</span> next: <span class="type">Node</span>?;</span><br><span class="line">        <span class="keyword">init</span>(e: <span class="type">E</span>?, next: <span class="type">Node</span>?) &#123;</span><br><span class="line">            <span class="keyword">self</span>.e = e</span><br><span class="line">            <span class="keyword">self</span>.next = next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkedListIterator</span>: <span class="title">IteratorProtocol</span> </span>&#123;</span><br><span class="line">        <span class="keyword">typealias</span> <span class="type">Element</span> = <span class="type">E</span></span><br><span class="line">        <span class="keyword">var</span> head: <span class="type">Node</span>?</span><br><span class="line">        <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">E</span>? &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> next = head?.next &#123;</span><br><span class="line">                <span class="keyword">defer</span> &#123; head = head?.next &#125;</span><br><span class="line">                <span class="keyword">return</span> next.e</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> dummyHead: <span class="type">Node</span>?</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> size: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        dummyHead = <span class="type">Node</span>.<span class="keyword">init</span>()</span><br><span class="line">        size = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// other method...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现Sequence协议</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">LinkedList</span>: <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">    __consuming <span class="function"><span class="keyword">func</span> <span class="title">makeIterator</span><span class="params">()</span></span> -&gt; <span class="type">LinkedListIterator</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">LinkedListIterator</span>(head: <span class="keyword">self</span>.dummyHead)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> list = <span class="type">LinkList</span>&lt;<span class="type">Int</span>&gt;(arrayLiteral: <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> list &#123;</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考资料：</p><p><a href="https://developer.apple.com/documentation/swift/sequence" target="_blank" rel="noopener">Sequence</a><br><a href="https://academy.realm.io/posts/try-swift-soroush-khanlou-sequence-collection/" target="_blank" rel="noopener">Everything You Ever Wanted to Know on Sequence &amp; Collection</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sequence 协议为类型提供了迭代访问的能力，凡是实现了 Sequence 的类型，都快进行迭代访问，即使用&lt;code&gt;for-in&lt;/code&gt;语句进行访问，标准库中的&lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Dictionary&lt;/code&gt;, &lt;code
      
    
    </summary>
    
      <category term="Swift" scheme="http://liujinlongxa.com/categories/Swift/"/>
    
    
      <category term="Swift" scheme="http://liujinlongxa.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI:SwiftUI与UIKit互相调用</title>
    <link href="http://liujinlongxa.com/2019/07/18/SwiftUI-SwiftUI%E4%B8%8EUIKit%E4%BA%92%E7%9B%B8%E8%B0%83%E7%94%A8/"/>
    <id>http://liujinlongxa.com/2019/07/18/SwiftUI-SwiftUI与UIKit互相调用/</id>
    <published>2019-07-17T16:11:22.000Z</published>
    <updated>2019-10-23T16:10:50.568Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在-SwiftUI-中调用-UIKit"><a href="#在-SwiftUI-中调用-UIKit" class="headerlink" title="在 SwiftUI 中调用 UIKit"></a>在 SwiftUI 中调用 UIKit</h1><p>在 SwiftUI 中使用 UIKit 需要用到<code>UIViewRepresentable</code>和<code>UIViewControllerRepresentable</code>两个协议，分别对应在 SwiftUI 中使用<code>UIView</code>和<code>UIViewController</code>。</p><h2 id="在-SwiftUI-中使用-UIView"><a href="#在-SwiftUI-中使用-UIView" class="headerlink" title="在 SwiftUI 中使用 UIView"></a>在 SwiftUI 中使用 UIView</h2><p>在 SwiftUI 中使用<code>UIView</code>需要实现<code>UIViewRepresentable</code>协议，如下代码实现了在 SwiftUI 的<code>List</code>控件中使用<code>UITableViewCell</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TableViewCell</span>: <span class="title">UIViewRepresentable</span> </span>&#123;</span><br><span class="line">    @<span class="type">Binding</span> <span class="keyword">var</span> text: <span class="type">String</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeUIView</span><span class="params">(context: UIViewRepresentableContext&lt;TableViewCell&gt;)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cell = <span class="type">UITableViewCell</span>(style: .<span class="keyword">default</span>, reuseIdentifier: <span class="string">"cell"</span>)</span><br><span class="line">        cell.textLabel?.text = text</span><br><span class="line">        cell.selectionStyle = .gray</span><br><span class="line">        <span class="keyword">return</span> cell</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateUIView</span><span class="params">(<span class="number">_</span> uiView: UITableViewCell, context: Context)</span></span> &#123;</span><br><span class="line">        uiView.textLabel?.text = text</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span> : <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">State</span> <span class="keyword">var</span> text: <span class="type">String</span> = <span class="string">"hello"</span></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span>(<span class="number">0</span>...<span class="number">5</span>) &#123; idx <span class="keyword">in</span></span><br><span class="line">            <span class="type">TableViewCell</span>(text: <span class="keyword">self</span>.$text)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span> <span class="type">DEBUG</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView_Previews</span> : <span class="title">PreviewProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ContentView</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h2 id="在-SwiftUI-中使用-UIViewController"><a href="#在-SwiftUI-中使用-UIViewController" class="headerlink" title="在 SwiftUI 中使用 UIViewController"></a>在 SwiftUI 中使用 UIViewController</h2><p>在 SwiftUI 中使用<code>UIViewController</code>需要实现<code>UIViewControllerRepresentable</code>协议，如下示例展示了怎么从一个 SwiftUI 页面跳转到<code>UIViewController</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyViewController</span>: <span class="title">UIViewControllerRepresentable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeUIViewController</span><span class="params">(context: Context)</span></span> -&gt; <span class="type">UIViewController</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> vc = <span class="type">UIViewController</span>()</span><br><span class="line">        vc.view.backgroundColor = <span class="type">UIColor</span>.white</span><br><span class="line">        <span class="keyword">return</span> vc</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateUIViewController</span><span class="params">(<span class="number">_</span> uiViewController: UIViewController, context: Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span> : <span class="title">View</span> </span>&#123;</span><br><span class="line">    @<span class="type">State</span> <span class="keyword">var</span> text: <span class="type">String</span> = <span class="string">"hello"</span></span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">NavigationLink</span>(destination:</span><br><span class="line">                <span class="type">MyViewController</span>()</span><br><span class="line">                .navigationBarTitle(<span class="string">"My ViewController"</span>, displayMode: .inline)</span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">"Click to push"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="在-UIKit-中调用-SwiftUI"><a href="#在-UIKit-中调用-SwiftUI" class="headerlink" title="在 UIKit 中调用 SwiftUI"></a>在 UIKit 中调用 SwiftUI</h1><p>在 UIKit 中使用 SwiftUI 要比在 SwiftUI 中使用 SwiftUI 简单很多，只需要使用<code>UIHostingController</code>对 SwiftUI 的控件进行一下包装就可以，代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vc = <span class="type">UIHostingController</span>(rootView: <span class="type">Text</span>(<span class="string">"Hello World"</span>))</span><br></pre></td></tr></table></figure><p>包装出来的结果是一个<code>UIViewController</code>，这样就可以在其他<code>UIView</code>或<code>UIViewController</code>中使用了。可以将这个<code>UIViewController</code>作为一个<code>childViewController</code>加到其他的<code>UIView</code>或<code>UIViewController</code>中去</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在-SwiftUI-中调用-UIKit&quot;&gt;&lt;a href=&quot;#在-SwiftUI-中调用-UIKit&quot; class=&quot;headerlink&quot; title=&quot;在 SwiftUI 中调用 UIKit&quot;&gt;&lt;/a&gt;在 SwiftUI 中调用 UIKit&lt;/h1&gt;&lt;p&gt;在 
      
    
    </summary>
    
      <category term="SwiftUI" scheme="http://liujinlongxa.com/categories/SwiftUI/"/>
    
    
      <category term="Swift" scheme="http://liujinlongxa.com/tags/Swift/"/>
    
      <category term="SwiftUI" scheme="http://liujinlongxa.com/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>Flask项目部署：Nginx + Gunicorn</title>
    <link href="http://liujinlongxa.com/2019/01/27/Flask%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%EF%BC%9ANginx-Gunicorn/"/>
    <id>http://liujinlongxa.com/2019/01/27/Flask项目部署：Nginx-Gunicorn/</id>
    <published>2019-01-27T08:45:05.000Z</published>
    <updated>2019-01-27T09:30:04.339Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做自己的个人项目诗词书斋，用到了服务器，使用的是自己熟悉的 Flask 框架编写后端接口，写完之后需要部署到阿里云服务器上，本文是我对整个部署流程的一个总结。</p><h3 id="总体方案"><a href="#总体方案" class="headerlink" title="总体方案"></a>总体方案</h3><p>总体方案是 Nginx + Gunicorn，Nginx 负责代理转发，Gunicorn 是一个 WSGI 容器，负责启动应用。我使用的是阿里云 Ubuntu 系统。</p><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><ol><li>安装 Nginx</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 更新源</span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="meta">#</span> 安装nginx</span><br><span class="line">sudo apt-get install nginx</span><br><span class="line"><span class="meta">#</span> 启动nginx</span><br><span class="line">sudo /etc/init.d/nginx start</span><br></pre></td></tr></table></figure><p>启动之后，在浏览器上输入服务器的外网 IP 就可以看到 Nginx 的界面</p><ol start="2"><li>配置 Nginx</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 删除Nginx默认配置文件</span><br><span class="line">sudo rm /etc/nginx/sites-enabled/default</span><br><span class="line"><span class="meta">#</span> 创建自己的配置文件</span><br><span class="line">sudo touch /etc/nginx/sites-available/flask_setting</span><br><span class="line"><span class="meta">#</span> 创建连接</span><br><span class="line">sudo ln /etc/nginx/sites-available/flask_setting /etc/nginx/sites-enabled/flask_setting</span><br><span class="line"><span class="meta">#</span> 编辑配置文件</span><br><span class="line">vim /etc/nginx/sites-enabled/flask_setting</span><br></pre></td></tr></table></figure><p>配置文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://127.0.0.1:8000;</span><br><span class="line">                proxy_set_header Host $host;</span><br><span class="line">                proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：127.0.0.1:8000 是 flask 应用运行的本地地址，gunicorn 运行应用默认使用 8000 端口。</p><ol start="3"><li>安装 pipenv</li></ol><p>pipenv 是 Python 的虚拟运行环境。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/kennethreitz/pipenv/master/get-pipenv.py | python</span><br></pre></td></tr></table></figure><ol start="4"><li>安装 Gunicorn</li></ol><p>进入 flask 项目目录，运行虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pipenv shell</span><br><span class="line">pipenv install # 安装flask等项目需要用到的包</span><br><span class="line">pipenv install gunicorn # 安装gunicorn</span><br></pre></td></tr></table></figure><ol start="5"><li>配置 Gunicorn</li></ol><p>在项目目录下创建<code>config.py</code>，填入内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">accesslog = <span class="string">"/root/log/access.log"</span>  <span class="comment"># 访问日志文件</span></span><br><span class="line">errorlog = <span class="string">"/root/log/error.log"</span>  <span class="comment"># 错误日志文件</span></span><br><span class="line">loglevel = <span class="string">'info'</span></span><br><span class="line">daemon = <span class="keyword">True</span> <span class="comment"># 作为守护进程运行</span></span><br></pre></td></tr></table></figure><ol start="6"><li>运行</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -c config.py release:app</span><br></pre></td></tr></table></figure><p>release 是项目入口文件包名，app 为入口文件中的应用名，即 Flask 对象的名称。</p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>上面就是整个部署流程，这过程中遇到的问题有如下几个：</p><ol><li>Ubuntu 默认的 Python 版本比较低，如果需要高版本的 Python，需要先安装 Python，再创建虚拟环境。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用Python3.7创建虚拟环境</span></span><br><span class="line">pipenv --python <span class="number">3.7</span></span><br></pre></td></tr></table></figure><ol start="2"><li>代码使用 Git 部署，之前使用的 GitHub，后来发现阿里云竟然屏蔽了 GitHub😒，代码拉不下啦，没办法，给项目添加了一个 Coding.net 的远程仓库，这样才可以把代码拉下来。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上就是我部署 Flask 项目的整个流程，其实 Python 项目的部署方案有很多种，这只是其中的一种方案。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在做自己的个人项目诗词书斋，用到了服务器，使用的是自己熟悉的 Flask 框架编写后端接口，写完之后需要部署到阿里云服务器上，本文是我对整个部署流程的一个总结。&lt;/p&gt;
&lt;h3 id=&quot;总体方案&quot;&gt;&lt;a href=&quot;#总体方案&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="Python" scheme="http://liujinlongxa.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://liujinlongxa.com/tags/Python/"/>
    
      <category term="Flask" scheme="http://liujinlongxa.com/tags/Flask/"/>
    
      <category term="Backend" scheme="http://liujinlongxa.com/tags/Backend/"/>
    
  </entry>
  
  <entry>
    <title>2018年终总结</title>
    <link href="http://liujinlongxa.com/2019/01/05/2018%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://liujinlongxa.com/2019/01/05/2018年终总结/</id>
    <published>2019-01-04T16:03:00.000Z</published>
    <updated>2019-01-27T08:43:02.729Z</updated>
    
    <content type="html"><![CDATA[<p>这几天看到到处都是年终总结的博客，自己也来凑凑热闹。我打算写两篇，第一篇是回顾 2018，第二篇是展望 2019。这是第一篇，主要内容是总结一下自己 2018 年都做了哪些事情，有哪些得失。</p><h2 id="学习方面"><a href="#学习方面" class="headerlink" title="学习方面"></a>学习方面</h2><p>除了 iOS，2018 年自己还确实学了不少东西，下面我大概列举了一下自己 2018 年学的东西：</p><ul><li>HTML/CSS</li><li>JavaScript</li><li>Node.js</li><li>Python/Flask</li><li>Flutter</li><li>React/ReactNative</li><li>微信小程序开发</li></ul><p>虽然学了很多，但是没有太多实践的机会，所有很多东西学的并不是很深入。</p><p>另外，这些东西基本都是在 10 月份之前学的，10 月份开始，由于公司新项目启动，自己进入了疯狂加班状态，学习基本处于半停滞状态。10 月份到 12 月份基本没有学习什么新的东西。</p><p>另外，由于新项目采用 Swift 语言开发，自己在 Swift 语言上也有了一些经验。</p><h2 id="工作方面"><a href="#工作方面" class="headerlink" title="工作方面"></a>工作方面</h2><p>2018 年已经是我在懒人听书呆的第 4 个年头了，说实话，我当初也没有想到自己能呆这么久。</p><p>今年工作上最大的事情就是从 9 月份开始，我作为技术经理，全权负责公司新项目芽芽故事 iOS 端的开发工作。经过团队（3 个人）一起的不懈努力，最终于 12 月中旬，按时完成了开发任务，没有延期。这是我在懒人第一次完整的负责一个 App 的整个开发过程，从最开始的立项，架构设计，技术选型，再到模块划分，人员分配等。这个过程中自己确实得到了很大的锻炼。不光是技术上的，还包括沟通，协调，管理等能力也得到了很大的提升。</p><h2 id="生活方面"><a href="#生活方面" class="headerlink" title="生活方面"></a>生活方面</h2><p>年初定的减肥计划，上半年执行的很好，到 8 月份时最低体重降到了 67kg。不过，经过 10 月，11 月，12 月的加班，又反弹到了 72kg，看来明年还得继续努力啊。</p><p>9 月份跟公司一起去日本旅游了一趟，算是了了自己的一桩心愿。</p><p>投资方面，股市暴跌，基金赔了将近 1 万块。上半年 P2P 暴雷，虽然自己投的平台没有出事，但还是吓得接连减仓。下半年和朋友合伙投资了一家便利店，最终被合伙人坑了，赔了将近 4 万，加上基金赔的，基本上把自己去年在数字货币上赚的又都赔进去了，只能怪自己阅历太少，不知人心险恶。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面就是我 2018 年的总结，总的来说，2018 年自己的表现并不是很好，年初的很多目标没有完成，留给自己的时间已经不多了，毕竟年龄在那摆着，已经是快奔三的人了。希望自己继续努力加油，在 2019 年能取得更大的进步。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这几天看到到处都是年终总结的博客，自己也来凑凑热闹。我打算写两篇，第一篇是回顾 2018，第二篇是展望 2019。这是第一篇，主要内容是总结一下自己 2018 年都做了哪些事情，有哪些得失。&lt;/p&gt;
&lt;h2 id=&quot;学习方面&quot;&gt;&lt;a href=&quot;#学习方面&quot; class=&quot;
      
    
    </summary>
    
      <category term="其他" scheme="http://liujinlongxa.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://liujinlongxa.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(6)</title>
    <link href="http://liujinlongxa.com/2018/09/28/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-6/"/>
    <id>http://liujinlongxa.com/2018/09/28/Python学习笔记-6/</id>
    <published>2018-09-27T23:21:25.000Z</published>
    <updated>2018-10-01T02:45:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><h3 id="原始的装饰器模式"><a href="#原始的装饰器模式" class="headerlink" title="原始的装饰器模式"></a>原始的装饰器模式</h3><ul><li>下面的实例是在函数 f1 执行前打印一个时间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">   print(time.time())</span><br><span class="line">   func()</span><br><span class="line"> <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line"> print(<span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line">decorator(f1)()</span><br></pre></td></tr></table></figure><h3 id="Python-中对于装饰器的语法糖"><a href="#Python-中对于装饰器的语法糖" class="headerlink" title="Python 中对于装饰器的语法糖"></a>Python 中对于装饰器的语法糖</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">   print(time.time())</span><br><span class="line">   func()</span><br><span class="line"> <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line"> print(<span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><h3 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func_name)</span>:</span></span><br><span class="line">   print(time.time())</span><br><span class="line">   func(func_name)</span><br><span class="line"> <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(func_name)</span>:</span></span><br><span class="line"> print(<span class="string">'hello world'</span> + func_name)</span><br><span class="line"></span><br><span class="line">f1(<span class="string">"ljl"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持不同参数个数</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args)</span>:</span></span><br><span class="line">   print(time.time())</span><br><span class="line">   func(*args)</span><br><span class="line"> <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(func_name)</span>:</span></span><br><span class="line"> print(<span class="string">'hello world'</span> + func_name)</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line"> print(<span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line">f1(<span class="string">"ljl"</span>)</span><br><span class="line">f2()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带关键字参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">   print(time.time())</span><br><span class="line">   func(*args, **kw)</span><br><span class="line"> <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta"> @decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(func_name, **kw)</span>:</span></span><br><span class="line"> print(<span class="string">'hello world'</span> + func_name)</span><br><span class="line"> print(kw)</span><br><span class="line"></span><br><span class="line">f1(<span class="string">"ljl"</span>)</span><br><span class="line">f2()</span><br><span class="line">f3(<span class="string">"ljl"</span>, a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="string">'ljl'</span>)</span><br></pre></td></tr></table></figure><ul><li>调用一个函数，如果不知道函数的参数，都可以用<code>func(*args, **kw)</code>这种形式调用，因此为了通用，装饰器的内部函数<code>wrapper</code>的参数就可以为这种形式</li></ul><h3 id="装饰器带有参数"><a href="#装饰器带有参数" class="headerlink" title="装饰器带有参数"></a>装饰器带有参数</h3><ul><li>如果装饰器带有参数，可以再在外面套一层函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            print(<span class="string">'%s %s():'</span> % (text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@log('execute')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'2015-3-25'</span>)</span><br></pre></td></tr></table></figure><h2 id="Python-的其他知识"><a href="#Python-的其他知识" class="headerlink" title="Python 的其他知识"></a>Python 的其他知识</h2><h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><ul><li>列表推导式类似 map 或 filter 函数，是 Python 特有的语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">ret1 = [i * i <span class="keyword">for</span> i <span class="keyword">in</span> a]</span><br><span class="line">print(ret1) <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64]</span></span><br><span class="line">ret2 = [i * i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i &gt;= <span class="number">5</span>]</span><br><span class="line">print(ret2) <span class="comment"># [25, 36, 49, 64]</span></span><br><span class="line">a1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">ret3 = &#123;i * i <span class="keyword">for</span> i <span class="keyword">in</span> a1&#125;</span><br><span class="line">print(ret3) <span class="comment"># &#123;16, 1, 4, 9&#125;</span></span><br><span class="line"></span><br><span class="line">students = &#123;</span><br><span class="line"> <span class="string">'ljl'</span>: <span class="number">12</span>,</span><br><span class="line"> <span class="string">'lyb'</span>: <span class="number">20</span>,</span><br><span class="line"> <span class="string">'aaa'</span>: <span class="number">11</span></span><br><span class="line">&#125;</span><br><span class="line">ret4 = [key <span class="keyword">for</span> key, value <span class="keyword">in</span> students.items()]</span><br><span class="line">print(ret4) <span class="comment"># ['ljl', 'lyb', 'aaa']</span></span><br><span class="line">ret5 = &#123;value: key <span class="keyword">for</span> key, value <span class="keyword">in</span> students.items()&#125;</span><br><span class="line">print(ret5) <span class="comment"># &#123;12: 'ljl', 20: 'lyb', 11: 'aaa'</span></span><br><span class="line">ret6 = (key <span class="keyword">for</span> key, value <span class="keyword">in</span> students.items()) <span class="comment"># 得到的是一个generator</span></span><br></pre></td></tr></table></figure><h3 id="迭代器与生成器"><a href="#迭代器与生成器" class="headerlink" title="迭代器与生成器"></a>迭代器与生成器</h3><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><ul><li>可迭代对象，可以被 for-in 遍历的对象，list, set 等</li><li>迭代器，是一个对象</li><li>迭代器有一次性的特征，只能遍历一次</li><li>迭代器一定是一个可迭代对象，但是可迭代对象不一定是迭代器，例如 list 是可迭代对象，但 list 不是迭代器，因为 list 可以重复遍历</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BookCollection就是一个自定义的可迭代对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookCollection</span>:</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">   self.data = [<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="string">"ccc"</span>]</span><br><span class="line">   self.cur = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">   <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">   <span class="keyword">if</span> self.cur &gt;= len(self.data):</span><br><span class="line">     <span class="keyword">raise</span> StopIteration()</span><br><span class="line">   r = self.data[self.cur]</span><br><span class="line">   self.cur += <span class="number">1</span></span><br><span class="line">   <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">books = BookCollection()</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> books:</span><br><span class="line"> print(b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> books:</span><br><span class="line"> print(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只会打印一次，第二次遍历无效，解决方法：</span></span><br><span class="line"><span class="comment"># 1. 重新创建一个BookCollection对象</span></span><br><span class="line"><span class="comment"># 2. copy</span></span><br></pre></td></tr></table></figure><p>解决只能遍历一次的问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">books_copy = copy.copy(books) <span class="comment"># 浅复制</span></span><br><span class="line">books_copy2 = copy.deepcopy(books) <span class="comment"># 深复制</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> books:</span><br><span class="line"> print(b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> books_copy:</span><br><span class="line"> print(b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> books_copy2:</span><br><span class="line"> print(b)</span><br></pre></td></tr></table></figure><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><ul><li>生成器是一个函数，主要是为了解决遍历时内存消耗过大的问题</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">(max)</span>:</span></span><br><span class="line">  n = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> n &lt;= max:</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> n <span class="comment"># 返回n，每次调用next接着这里执行</span></span><br><span class="line"></span><br><span class="line">g = gen(<span class="number">10000</span>)</span><br><span class="line">print(next(g)) <span class="comment"># 1</span></span><br><span class="line">print(next(g)) <span class="comment"># 2</span></span><br><span class="line">print(next(g)) <span class="comment"># 3</span></span><br><span class="line">print(next(g)) <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><h3 id="None"><a href="#None" class="headerlink" title="None"></a>None</h3><ul><li>None 表示空，不等于空字符串，空列表，false，0，如果是从类型还是比较运行算上都不相等</li><li>None 在作为条件判断时会转为 False</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line">b = <span class="keyword">False</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line">print(<span class="keyword">None</span> == a) <span class="comment"># False</span></span><br><span class="line">print(<span class="keyword">None</span> == b) <span class="comment"># False</span></span><br><span class="line">print(<span class="keyword">None</span> == c) <span class="comment"># False</span></span><br><span class="line">print(a <span class="keyword">is</span> <span class="keyword">None</span>) <span class="comment"># False</span></span><br><span class="line">print(b <span class="keyword">is</span> <span class="keyword">None</span>) <span class="comment"># False</span></span><br><span class="line">print(c <span class="keyword">is</span> <span class="keyword">None</span>) <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断值为空</span></span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>自定义对象参与条件判断与内置的<code>__len__</code>与<code>__bool__</code>方法有关</li><li>不存在<code>__bool__</code>时会调用<code>__len__</code>来判断对象时 True 还是 False，<code>__len__</code>返回 0 或 False，则对象为 False，否则对象为 True</li><li>全局 len 函数就是调用对象的<code>__len__</code></li><li>如果有<code>__bool__</code>方法，则由<code>__bool__</code>方法来控制对象时 True 还是 False，<code>__bool__</code>只能返回 Bool 类型，<code>__len__</code>不再被调用</li></ul><h3 id="装饰器的副作用"><a href="#装饰器的副作用" class="headerlink" title="装饰器的副作用"></a>装饰器的副作用</h3><ul><li>添加装饰器后，函数的名字<code>__name__</code>会被改变</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">    print(time.time())</span><br><span class="line">    func()</span><br><span class="line">  <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">  print(f1.__name__)  <span class="comment"># wrapper</span></span><br><span class="line"></span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><p>解决办法： 使用 wraps</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">  @wraps(func)</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">    print(time.time())</span><br><span class="line">    func()</span><br><span class="line">  <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">  print(f1.__name__)  <span class="comment"># f1</span></span><br><span class="line"></span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="Python-中的异常"><a href="#Python-中的异常" class="headerlink" title="Python 中的异常"></a>Python 中的异常</h3><ul><li>Exception</li><li>AttributeError</li><li>IndexError</li><li>KeyError</li><li>NameError</li><li>SyntaxError</li><li>TypeError</li><li>ValueError</li><li>ZeroDivisionError</li></ul><h3 id="错误处理-1"><a href="#错误处理-1" class="headerlink" title="错误处理"></a>错误处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  a = <span class="number">3</span> / <span class="number">0</span></span><br><span class="line">  fn()</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">  print(<span class="string">'Division by zero'</span>)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">  print(<span class="string">'Invalid Name'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">  printn(<span class="string">'Defalut handler'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="comment"># 没有错误时会调用</span></span><br><span class="line">  print(<span class="string">'No errors'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">  print(<span class="string">'Clean up actions'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;装饰器&quot;&gt;&lt;a href=&quot;#装饰器&quot; class=&quot;headerlink&quot; title=&quot;装饰器&quot;&gt;&lt;/a&gt;装饰器&lt;/h2&gt;&lt;h3 id=&quot;原始的装饰器模式&quot;&gt;&lt;a href=&quot;#原始的装饰器模式&quot; class=&quot;headerlink&quot; title=&quot;原始的装饰
      
    
    </summary>
    
      <category term="Python" scheme="http://liujinlongxa.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://liujinlongxa.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(5)</title>
    <link href="http://liujinlongxa.com/2018/09/27/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-5/"/>
    <id>http://liujinlongxa.com/2018/09/27/Python学习笔记-5/</id>
    <published>2018-09-26T22:57:59.000Z</published>
    <updated>2018-09-26T23:31:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="Python-中一切皆对象"><a href="#Python-中一切皆对象" class="headerlink" title="Python 中一切皆对象"></a>Python 中一切皆对象</h3><ul><li>函数也是对象</li><li>可以把一个函数当成另外一个参数，传递到另外的函数里，也可以把一个函数当做另一个函数的返回值</li></ul><h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><ul><li>闭包：函数 + 上下文（环境变量）</li><li>闭包的信息保存在函数的<code>__closure__</code>里</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">curve_pre</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">25</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这个闭包捕获了a</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cureve</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a * x * x</span><br><span class="line">    <span class="keyword">return</span> cureve</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="number">4</span></span><br><span class="line">f = curve_pre()</span><br><span class="line">print(f(<span class="number">2</span>)) <span class="comment"># 100</span></span><br><span class="line">print(f.__closure__[<span class="number">0</span>].cell_contents)  <span class="comment"># 25</span></span><br></pre></td></tr></table></figure><h3 id="使用闭包注意事项"><a href="#使用闭包注意事项" class="headerlink" title="使用闭包注意事项"></a>使用闭包注意事项</h3><ul><li>如果没有捕获变量，则<strong>closure</strong>为空</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 此时f2不是一个闭包，因为没有捕获变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># a 是一个局部变量，不会影响外部的变量</span></span><br><span class="line">        a = <span class="number">20</span></span><br><span class="line">        print(a)</span><br><span class="line">    print(a)</span><br><span class="line">    f2()</span><br><span class="line">    print(a)</span><br><span class="line">    <span class="keyword">return</span> f2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = f1()  <span class="comment"># 10 20 10</span></span><br><span class="line">print(f.__closure__) <span class="comment"># None</span></span><br></pre></td></tr></table></figure><h3 id="闭包的应用"><a href="#闭包的应用" class="headerlink" title="闭包的应用"></a>闭包的应用</h3><ul><li>闭包可以封装细节</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factory</span><span class="params">(pos)</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">go</span><span class="params">(step)</span>:</span></span><br><span class="line">       <span class="keyword">nonlocal</span> pos  <span class="comment"># 声明pos不是局部变量</span></span><br><span class="line">       new_pos = pos + step</span><br><span class="line">       pos = new_pos  <span class="comment"># pos如果不声明为非局部变量则这一句户报错</span></span><br><span class="line">       <span class="keyword">return</span> new_pos</span><br><span class="line">   <span class="keyword">return</span> go</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = factory(<span class="number">0</span>)</span><br><span class="line">print(a(<span class="number">2</span>)) <span class="comment"># 2</span></span><br><span class="line">print(a(<span class="number">3</span>)) <span class="comment"># 5</span></span><br><span class="line">print(a(<span class="number">5</span>)) <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><h3 id="lambda-表达式-匿名函数）"><a href="#lambda-表达式-匿名函数）" class="headerlink" title="lambda 表达式 (匿名函数）"></a>lambda 表达式 (匿名函数）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">   <span class="keyword">return</span> x + y</span><br><span class="line">sum = add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(sum)</span><br><span class="line"></span><br><span class="line"><span class="comment"># lambda表达式</span></span><br><span class="line">sum = <span class="keyword">lambda</span> x, y: x + y</span><br><span class="line">print(sum(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h3><ul><li>条件为真的返回结果 if 条件判断 else 条件为假的返回结果</li><li>相当于其他语言的?:表达是</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">12</span></span><br><span class="line">b = <span class="number">13</span></span><br><span class="line"><span class="comment"># 如果a大于b则r等于a否则r等于b</span></span><br><span class="line">r = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a)</span>:</span></span><br><span class="line"> <span class="keyword">return</span> a * a</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = map(fun, a)</span><br><span class="line">print(list(b))</span><br><span class="line"></span><br><span class="line">c = map(<span class="keyword">lambda</span> value: value * value, a)</span><br><span class="line">print(list(c))</span><br><span class="line"></span><br><span class="line"><span class="comment"># map可以传入多个列表</span></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">l2 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">r = map(<span class="keyword">lambda</span> x, y: x + y, l1, l2) <span class="comment"># 传入列表的个数与lambda表达式参数的个数一样</span></span><br><span class="line">print(list(r)) <span class="comment"># [3, 6, 9, 12]</span></span><br></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">r = reduce(<span class="keyword">lambda</span> x, y: x + y, l1, <span class="number">0</span>)</span><br><span class="line">print(r) <span class="comment"># 15</span></span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">r = filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, l1)</span><br><span class="line">print(list(r)) <span class="comment"># [2, 4]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h2&gt;&lt;h3 id=&quot;Python-中一切皆对象&quot;&gt;&lt;a href=&quot;#Python-中一切皆对象&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Python" scheme="http://liujinlongxa.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://liujinlongxa.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>日本五日游</title>
    <link href="http://liujinlongxa.com/2018/09/19/%E6%97%A5%E6%9C%AC%E4%BA%94%E6%97%A5%E6%B8%B8/"/>
    <id>http://liujinlongxa.com/2018/09/19/日本五日游/</id>
    <published>2018-09-18T23:01:12.000Z</published>
    <updated>2019-01-13T03:53:57.404Z</updated>
    
    <content type="html"><![CDATA[<p>上周公司组织了去日本旅游（5 天 4 晚），这篇博客主要记录一下我在日本的见闻以及一些感受。</p><p>我们是上周五（2018-9-14）早上 9 点出发，到东京成田机场是下午 3 点左右。刚到机场就感受到了很多不一样的东西。</p><p>首先是随处可见的自动贩卖机</p><p><img src="http://blog.shicishuzhai.com/b99ccb803b24538dcd01dc05ca616590.png" alt="1"></p><p>跟国内不一样的饮料</p><p><img src="http://blog.shicishuzhai.com/d08c6167376e49c4b8e291a549ea3a29.png" alt="2"></p><p>到酒店已经是下午 5 点了，刚到酒店把行李一放，我们就迫不及待的要出去逛逛。</p><p>先是去吃饭，说了半天，总算用我们蹩脚的文给店员讲明白了我们要吃什么</p><p><img src="http://blog.shicishuzhai.com/68a8fdd6bec7b0539e1ae903038bca1e.png" alt="3"></p><p>吃完饭就开始逛，没走多远就遇见了一个 SEGA 的游戏厅，进去感受了一下，很有氛围</p><p><img src="http://blog.shicishuzhai.com/35256d5164ea9676134e17f6ef298a13.png" alt="4"></p><p>一楼是各种抓娃娃机，抓什么的都有，模型，手办</p><p><img src="http://blog.shicishuzhai.com/bdb9800142238555bdd08f8fc8755914.png" alt="5"></p><p>二楼就是各种游戏机，跟国内的游戏厅不太一样，这些游戏机基本上都是面向成年人的，店内基本上没有小孩子</p><p><img src="http://blog.shicishuzhai.com/5f2dd48ab7856767d7c9e67b5ec1b167.png" alt="6"></p><p>还看见了女神异闻录 5，哈哈，P5 天下第一啊！！！</p><p><img src="http://blog.shicishuzhai.com/7f1c31a4973d3ba2bd6b64ef62358ffe.png" alt="7"></p><p>FGO</p><p><img src="http://blog.shicishuzhai.com/d061a591511653ace668fea9265749fa.png" alt="8"></p><p>游戏厅逛完后，我们就继续沿着街道走，这时天已经渐渐黑了。我们找了一家居酒屋，进去点了几个菜，由于语言不通，闹出了很多笑话，本来我们想每人点一杯酒，结果店员理解成了只点 1 杯酒，另外居酒屋的烤串跟国内的很不一样，没有辣椒和自然，只是有一层甜甜的酱汁，而且拷的肉并不是全熟，我觉得顶多只有 5 分熟，不过口感很不错</p><p><img src="http://blog.shicishuzhai.com/0cf084450be445f25e52606874697813.png" alt="9"></p><p><img src="http://blog.shicishuzhai.com/bf007145e5a5a0528e228931711a5f11.png" alt="10"></p><p>之后又去了另外一家人气很旺的居酒屋，不过点的菜我们真的有点吃不惯，酒也喝不惯，总之体验一般。</p><p>这就是我们第一天的行程，夜晚的东京（准确说应该是成田市）还是很热闹的。</p><p>第二天的行程是迪士尼，总体来说还是玩的很开心的，几个比较刺激好玩的项目都玩了</p><p><img src="http://blog.shicishuzhai.com/d5c797e7f29e82f29558b2b43965b27a.png" alt="11"></p><p><img src="http://blog.shicishuzhai.com/fb9d239ac14e33a9da2c3a0f5d686afc.png" alt="12"></p><p><img src="http://blog.shicishuzhai.com/052b813516c4199c460777dc77986976.png" alt="13"></p><p><img src="http://blog.shicishuzhai.com/fa17479496a3a10928b4393eb8b8be92.png" alt="14"></p><p><img src="http://blog.shicishuzhai.com/d37f738a46f1e4333d64e7c615105f5a.png" alt="15"></p><p>晚上回到酒店又出去逛街了，这次又体验了两家居酒屋，这次的体验很不错，尝到了日本拉面，日本清酒，玉子烧等，非常好吃</p><p><img src="http://blog.shicishuzhai.com/62252bf6733e53c3e4a66b16e2d1d15b.png" alt="16"></p><p><img src="http://blog.shicishuzhai.com/a53f98243b6ec2b28b94e14d534b9945.png" alt="17"></p><p>吃完了逛了个超市，然后就回酒店了，第二天结束。</p><p>第三天我们先是去了一个公园，然后去了人眼八海，下午就直奔富士山。</p><p><img src="http://blog.shicishuzhai.com/c76734fa976bc1b1e25de9bd5ec8344a.png" alt="18"></p><p>日本的乡村，街道非常干净。</p><p><img src="http://blog.shicishuzhai.com/8c0980caa472b41be9e713c72765797d.png" alt="19"></p><p>中午的午餐，炸鸡排，非常好吃</p><p><img src="http://blog.shicishuzhai.com/4948bfe45898f6caf906667f48b7af55.png" alt="20"></p><p>乡村的自助贩卖摊位</p><p><img src="http://blog.shicishuzhai.com/a2feb65132d4ea710aad1c78d6567a10.png" alt="21"></p><p>人眼八海，水非常清</p><p><img src="http://blog.shicishuzhai.com/dd8b96fbe157842230ce527bc41e7c75.png" alt="22"></p><p>偷拍一个日本小萝莉</p><p><img src="http://blog.shicishuzhai.com/b41a8edcc4b19b3cd7797f65d1e1c32c.png" alt="23"></p><p>逛完了人眼八海，我们就直奔富士山，刚到富士山还云雾缭绕，什么也看不清，不一会，云开雾散，远处的富士山非常清晰</p><p><img src="http://blog.shicishuzhai.com/be9bc8a93af9181107b88af52167b296.png" alt="24"></p><p>来张自拍，在日本这几天又胖了几斤啊</p><p><img src="http://blog.shicishuzhai.com/8790cf6243b43cfbf322361c3abf63ce.png" alt="25"></p><p>看完了富士山我们就直接回酒店了，今天住的酒店是温泉酒店，但说实话温泉真的不怎么样，体验非常差。第三天就这样结束了。</p><p>第四天就是购物之旅，早上先去了两家免税店，这个没啥看的，然后去了新宿，在新宿吃了寿喜烧，看了艺伎表演</p><p>歌舞伎町一番街</p><p><img src="http://blog.shicishuzhai.com/72e933ee6823743a71ef93ac9997ef5c.png" alt="26"></p><p>新宿也是满满的二次元味道</p><p><img src="http://blog.shicishuzhai.com/960e62e89527e7c449718732f3b68046.png" alt="27"></p><p>寿喜烧</p><p><img src="http://blog.shicishuzhai.com/16a2536e0f096f7a43e3886ec926b1f4.png" alt="28"></p><p>艺伎表演，我们几个一直在讨论表演者到底是个男的还是女的，直到走的时候也没看出来</p><p><img src="http://blog.shicishuzhai.com/6e1aab148169e47ccb7dcae42ebba7f2.png" alt="29"></p><p>接着我们就直奔秋叶原，这是本次旅游我最期待的行程</p><p>FGO 巨大的宣传画</p><p><img src="http://blog.shicishuzhai.com/55eb2fb09f66fcb213e61ff7f53546fc.png" alt="30"></p><p>世嘉的游戏厅</p><p><img src="http://blog.shicishuzhai.com/37a0546d5eac2bea9ed64a0bbb6ee3ac.png" alt="31"></p><p>到处的洋溢着二次元的气氛</p><p><img src="http://blog.shicishuzhai.com/1e2fa587184bb4fb5ed2c625c1229e11.png" alt="32"></p><p>传说中的女仆咖啡厅，只不过时间有限，没能进去体验一下（其实是钱包有限）</p><p><img src="http://blog.shicishuzhai.com/b7461fd51ab08c001ecdf05f7f6a5e2a.png" alt="33"></p><p>Cosplay</p><p><img src="http://blog.shicishuzhai.com/3cf8cc575a0fe33f5c3c448981eafb2c.png" alt="34"></p><p>秋叶原呆了两个小时，然后又去了银座，说实话，银座对我来说真的没什么逛的，我也没什么东西要买的</p><p>街上遇到了一个街头表演，我把仅剩的几个硬币全给了他</p><p><img src="http://blog.shicishuzhai.com/ce279b6b8e940b240e01e12d8371553f.png" alt="35"></p><p>银座逛完，吃完饭我们就回酒店了，第四天就结束了。</p><p>第五天就是回家。</p><p>总结一下这次旅游的感受，日本给我最大的印象就是干净，不管是繁华的大街上还是乡下的小路上，都非常干净，而且他们的垃圾分类真的做的非常好，导游一再提醒我们扔垃圾要分开仍，在国内即使碰到了分类垃圾箱也是随便扔，但这几天旅游却不由自主的做到了垃圾分类。另外一点就是日本的服务员非常热情，不管你是去便利店，商城，大超市，居酒屋还是其他什么地方，服务员见到你第一句都是“欢迎光临”，非常热情。其他的就没什么了，能去到秋叶原也算是圆了我的一个梦想。这次由于时间比较短，很多想去的地方没有去，希望下次有机会还能再去日本好好逛逛。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上周公司组织了去日本旅游（5 天 4 晚），这篇博客主要记录一下我在日本的见闻以及一些感受。&lt;/p&gt;
&lt;p&gt;我们是上周五（2018-9-14）早上 9 点出发，到东京成田机场是下午 3 点左右。刚到机场就感受到了很多不一样的东西。&lt;/p&gt;
&lt;p&gt;首先是随处可见的自动贩卖机&lt;
      
    
    </summary>
    
      <category term="游记" scheme="http://liujinlongxa.com/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="旅游" scheme="http://liujinlongxa.com/tags/%E6%97%85%E6%B8%B8/"/>
    
      <category term="日本" scheme="http://liujinlongxa.com/tags/%E6%97%A5%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(4)</title>
    <link href="http://liujinlongxa.com/2018/09/11/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-4/"/>
    <id>http://liujinlongxa.com/2018/09/11/Python学习笔记-4/</id>
    <published>2018-09-10T23:13:15.000Z</published>
    <updated>2019-01-13T03:53:57.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="正则表达式的定义"><a href="#正则表达式的定义" class="headerlink" title="正则表达式的定义"></a>正则表达式的定义</h3><ul><li>定义：正则表达式是一个特殊的字符序列，一个字符串是否与我们所设定的这样的字符序列相匹配。</li><li>作用：快速检索文本，实现一些替换文本的操作</li><li>Python 中的正则表达式模块：re</li></ul><h3 id="元字符和普通字符"><a href="#元字符和普通字符" class="headerlink" title="元字符和普通字符"></a>元字符和普通字符</h3><ul><li>普通字符：<code>abc</code></li><li>元字符：<code>\d, \D, \f, \n</code>等，每种元字符都有不同的含义</li><li>正则表达式就是普通字符和元字符组成的</li></ul><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><ul><li>中括号中的字符是<code>或</code>的关系</li><li>取反使用<code>^</code></li><li>范围：<code>[a-z], [a-zA-Z]</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'abc, acc, adc, aec, afc, ahc'</span></span><br><span class="line">r = re.findall(<span class="string">'a[^cfC]c'</span>, s) <span class="comment"># 表示已a开头，c结尾，中间的一个字母不是c,f,C中的任何一个</span></span><br><span class="line">print(r) <span class="comment"># ['abc', 'adc', 'aec', 'ahc']</span></span><br></pre></td></tr></table></figure><h3 id="概括字符集"><a href="#概括字符集" class="headerlink" title="概括字符集"></a>概括字符集</h3><ul><li><code>\d</code> 代表数字，相当于<code>[0-9]</code></li><li><code>\D</code> 代表非数字，相当于<code>[^0-9]</code></li><li><code>\w</code> 代表单词字符，相当于<code>[0-9a-zA-Z_]</code></li><li><code>\W</code> 代表非单词字符，相当于<code>[^0-9a-zA-Z_]</code></li><li><code>\s</code> 代表空白字符</li><li><code>\S</code> 代表非空白字符</li><li><code>.</code> 代表除换行符的所有字符</li></ul><h3 id="数量词"><a href="#数量词" class="headerlink" title="数量词"></a>数量词</h3><ul><li><code>[a-z]{3,6}</code> 匹配 3 到 6 次</li></ul><h3 id="贪婪和非贪婪"><a href="#贪婪和非贪婪" class="headerlink" title="贪婪和非贪婪"></a>贪婪和非贪婪</h3><ul><li>贪婪：尽可能多的匹配，一直到不满足条件为止</li><li>非贪婪：一旦满足条件就停止匹配</li><li>Python 倾向于贪婪模式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配3-6个字母，贪婪模式下，会匹配尽可能多的字母，直到不满足条件，因此会匹配出['python', 'java', 'php']</span></span><br><span class="line"><span class="comment"># 非贪婪模式下会匹配3个字符，【'pyt', 'hon', 'jav', 'php']</span></span><br><span class="line">a = <span class="string">'python 111java678php'</span></span><br><span class="line">r = re.findall(<span class="string">'[a-z]&#123;3,6&#125;'</span>, a) <span class="comment"># 贪婪模式</span></span><br><span class="line">r = re.findall(<span class="string">'[a-z]&#123;3,6&#125;?'</span>, a) <span class="comment"># 非贪婪模式，加一个问号</span></span><br></pre></td></tr></table></figure><h3 id="匹配-0-次，1-次或无限次"><a href="#匹配-0-次，1-次或无限次" class="headerlink" title="匹配 0 次，1 次或无限次"></a>匹配 0 次，1 次或无限次</h3><ul><li><code>*</code>匹配前面的字符 0 次或 n 次</li><li><code>+</code>匹配前面的字符 1 次或 n 次</li><li><code>?</code>匹配前面的字符 0 次或 1 次，要与非贪婪模式的问号区分</li></ul><h3 id="边界匹配符"><a href="#边界匹配符" class="headerlink" title="边界匹配符"></a>边界匹配符</h3><ul><li><code>^</code>首部，<code>^000</code>开头三个字符为<code>000</code></li><li><code>$</code>尾部，<code>000$</code>结尾三个字符为<code>000</code></li></ul><h3 id="组"><a href="#组" class="headerlink" title="组"></a>组</h3><ul><li>一个括号对应一组，<code>(Python){3}</code>，把一个组重复 3 次</li><li>组中的每个字符是且的关系</li></ul><h3 id="匹配模式参数"><a href="#匹配模式参数" class="headerlink" title="匹配模式参数"></a>匹配模式参数</h3><ul><li>忽略字母大小写: <code>re.I</code></li><li><code>.</code>表示匹配任意字符: <code>re.S</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'abc, acc, adc, aec, afc, ahc, aFc'</span></span><br><span class="line">r = re.findall(<span class="string">'a[cf]c'</span>, s, re.I) <span class="comment"># 忽略大小写</span></span><br><span class="line">print(r) <span class="comment"># ['acc', 'afc', 'aFc']</span></span><br></pre></td></tr></table></figure><h3 id="re-sub-正则替换"><a href="#re-sub-正则替换" class="headerlink" title="re.sub 正则替换"></a>re.sub 正则替换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'python 111java678php'</span></span><br><span class="line">r1 = re.sub(<span class="string">'\w&#123;3,6&#125;'</span>, <span class="string">"hhh"</span>, a, <span class="number">1</span>)  <span class="comment"># 最后一个参数1表示替换几个</span></span><br><span class="line"></span><br><span class="line">print(r1)  <span class="comment"># hhh 111java678php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'aa'</span> + value.group()  <span class="comment"># value.group()为匹配到的字符串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个参数为一个函数，匹配到后会把匹配的结果传给函数执行，并把函数返回的结果作为替换字符串</span></span><br><span class="line">r2 = re.sub(<span class="string">'\w&#123;3,6&#125;'</span>, convert, a)</span><br><span class="line">print(r2)  <span class="comment"># aapython 111java678php</span></span><br></pre></td></tr></table></figure><h3 id="match-与-search-函数"><a href="#match-与-search-函数" class="headerlink" title="match 与 search 函数"></a>match 与 search 函数</h3><ul><li>match 函数：从字符串的首字母开始匹配，如果首字母没有匹配到则返回空</li><li>search 函数：搜索字符串，知道找到第一个符合要求的字符串</li><li>match 和 search 只匹配一个结果，findall 会匹配所有符合条件的字符串</li></ul><h3 id="group-分组"><a href="#group-分组" class="headerlink" title="group 分组"></a>group 分组</h3><ul><li>使用括号进行分组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'life is short, i use python, i love python'</span></span><br><span class="line">r = re.search(<span class="string">'life(.*)python(.*)python'</span>, s)</span><br><span class="line">print(r.group(<span class="number">0</span>)) <span class="comment"># `life is short, i use python, i love python` (默认第0个分组为字符串本身)</span></span><br><span class="line">print(r.group(<span class="number">1</span>)) <span class="comment"># ` is short, i use`</span></span><br><span class="line">print(r.group(<span class="number">2</span>)) <span class="comment"># `, i love`</span></span><br><span class="line">print(r.group(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)) <span class="comment"># ('life is short, i use python, i love python', ' is short, i use ', ', i love ')</span></span><br><span class="line">print(r.groups())  <span class="comment"># (' is short, i use ', ', i love ') (不会返回完整字符串)</span></span><br></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="理解-JSON"><a href="#理解-JSON" class="headerlink" title="理解 JSON"></a>理解 JSON</h3><ul><li>JSON 是一种轻量级的数据格式</li><li>字符串是 JSON 的表现形式</li><li>JSON 字符串：符合 JSON 格式的字符串</li><li>JSON 对象：Python 中没有 JSON 对象，JS 中有 JSON 对象</li></ul><h3 id="JSON-的特点"><a href="#JSON-的特点" class="headerlink" title="JSON 的特点"></a>JSON 的特点</h3><ul><li>易于阅读</li><li>易于解析</li><li>网络传输效率高</li><li>跨语言交换数据</li></ul><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><ul><li>Python 中会把 JSON 字符串解析成字典或列表</li><li>Python 中的数据类型对应 JSON 中的数据类型：</li></ul><p><img src="http://blog.shicishuzhai.com/a222d6640d76f895c8ce620a3719dc4e.png" alt="1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 这里必须是里面是双引号，外面是单引号，false和true首字符必须小写</span></span><br><span class="line">s = <span class="string">'&#123;"name": "ljl", "age": 12, "flag": true&#125;'</span></span><br><span class="line">a = json.loads(s)  <span class="comment"># Python中会把JSON字符串解析成字典或列表</span></span><br><span class="line">print(a) <span class="comment"># &#123;'name': 'ljl', 'age': 12, 'flag': True&#125;</span></span><br></pre></td></tr></table></figure><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1 = json.dumps(a)</span><br><span class="line">print(s1)</span><br></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="枚举类型（Python3）"><a href="#枚举类型（Python3）" class="headerlink" title="枚举类型（Python3）"></a>枚举类型（Python3）</h3><ul><li>枚举也是一个类</li><li>枚举在 Python3 中才有，Python2 中没有枚举类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIP</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">2</span></span><br><span class="line">    BLACK = <span class="number">3</span></span><br><span class="line">    RED = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">print(VIP.YELLOW)  <span class="comment"># VIP.YELLOW</span></span><br><span class="line">print(VIP.YELLOW == VIP.GREEN)  <span class="comment"># false</span></span><br></pre></td></tr></table></figure><h3 id="枚举的优势"><a href="#枚举的优势" class="headerlink" title="枚举的优势"></a>枚举的优势</h3><ul><li>不可变</li><li>值不会重复</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIP</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">2</span></span><br><span class="line">    BLACK = <span class="number">3</span></span><br><span class="line">    RED = <span class="number">4</span></span><br><span class="line">    <span class="comment"># BLACK = 5  # error</span></span><br><span class="line">    YELLOW_ALIAS = <span class="number">1</span> <span class="comment"># YELLOW的别名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(VIP.YELLOW)  <span class="comment"># VIP.YELLOW</span></span><br><span class="line">print(VIP.YELLOW == VIP.GREEN)  <span class="comment"># false</span></span><br><span class="line">VIP.YELLOW = <span class="number">3</span>  <span class="comment"># error，枚举的值不能改变</span></span><br></pre></td></tr></table></figure><h3 id="枚举的操作"><a href="#枚举的操作" class="headerlink" title="枚举的操作"></a>枚举的操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">print(VIP.YELLOW)  <span class="comment"># VIP.YELLOW，枚举类型</span></span><br><span class="line">print(VIP.YELLOW.value)  <span class="comment"># 1，枚举的值</span></span><br><span class="line">print(VIP.YELLOW.name)  <span class="comment"># YELLOW，枚举的名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 枚举的遍历，遍历时别名不会遍历</span></span><br><span class="line"><span class="comment"># VIP.YELLOW</span></span><br><span class="line"><span class="comment"># VIP.GREEN</span></span><br><span class="line"><span class="comment"># VIP.BLACK</span></span><br><span class="line"><span class="comment"># VIP.RED</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> VIP:</span><br><span class="line">    print(v)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历枚举的所有值，包括别名</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> VIP.__members__:</span><br><span class="line">    print(v)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 枚举的比较</span></span><br><span class="line">print(VIP.YELLOW == VIP.GREEN) <span class="comment"># false</span></span><br><span class="line">print(VIP.YELLOW == VIP.YELLOW) <span class="comment"># false</span></span><br><span class="line">print(VIP.YELLOW == <span class="number">1</span>)  <span class="comment"># false</span></span><br><span class="line"><span class="comment"># print(VIP.YELLOW &lt; VIP.GREEN)  # error，枚举不可以进行大小比较</span></span><br><span class="line">print(VIP.YELLOW.value == <span class="number">1</span>)  <span class="comment"># true</span></span><br><span class="line">print(VIP.YELLOW == VIP.YELLOW_ALIAS)  <span class="comment"># true</span></span><br></pre></td></tr></table></figure><h3 id="枚举的转换"><a href="#枚举的转换" class="headerlink" title="枚举的转换"></a>枚举的转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIP</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">2</span></span><br><span class="line">    BLACK = <span class="number">3</span></span><br><span class="line">    RED = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = VIP(<span class="number">1</span>)  <span class="comment"># a 初始化为VIP.YELLOW</span></span><br><span class="line">print(a) <span class="comment"># VIP.YELLOW</span></span><br><span class="line">print(a == VIP.YELLOW)  <span class="comment"># true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h2&gt;&lt;h3 id=&quot;正则表达式的定义&quot;&gt;&lt;a href=&quot;#正则表达式的定义&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="Python" scheme="http://liujinlongxa.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://liujinlongxa.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(3)</title>
    <link href="http://liujinlongxa.com/2018/09/04/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3/"/>
    <id>http://liujinlongxa.com/2018/09/04/Python学习笔记-3/</id>
    <published>2018-09-04T13:51:05.000Z</published>
    <updated>2018-10-01T03:40:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><ul><li>类的命名规则：首字母大写，驼峰表示法</li><li>在另一个模块中实用类：<code>from package.module import Student</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_file</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'name:'</span> + self.name)</span><br><span class="line">        print(<span class="string">'age:'</span> + str(self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">"ljl"</span>, <span class="number">12</span>)</span><br><span class="line">s.print_file()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Persion is reclaimed'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wake_up</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">"wake up %s"</span> % name)</span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">"Mars"</span>, <span class="number">30</span>)</span><br><span class="line">print(hasattr(p, <span class="string">'name'</span>))  <span class="comment"># 是否有某个属性</span></span><br><span class="line">print(getattr(p, <span class="string">'name'</span>))  <span class="comment"># 获取属性值</span></span><br><span class="line">print(p.name)</span><br><span class="line">setattr(p, <span class="string">'name'</span>, <span class="string">'ljl'</span>)  <span class="comment"># 设置属性值</span></span><br><span class="line">print(p.name)</span><br><span class="line"><span class="keyword">del</span>(p.name)  <span class="comment"># 删除属性</span></span><br><span class="line"><span class="comment"># print(p.name)  # Error</span></span><br><span class="line">p.wake_up(<span class="string">'ljl'</span>)</span><br><span class="line">Person.wake_up(p, <span class="string">'ljl'</span>)  <span class="comment"># 另一种调用成员方法的方式</span></span><br><span class="line">p = <span class="keyword">None</span></span><br></pre></td></tr></table></figure><h3 id="方法与函数的区别"><a href="#方法与函数的区别" class="headerlink" title="方法与函数的区别"></a>方法与函数的区别</h3><ul><li>方法：是一个面向对象的概念，类中的函数应该称为方法</li><li>函数：是一个面向过程的概念</li><li>数据成员：对象的特征</li></ul><h3 id="实例化与构造函数"><a href="#实例化与构造函数" class="headerlink" title="实例化与构造函数"></a>实例化与构造函数</h3><ul><li>实例化时，构造函数是自动调用，不需要显式调用</li><li>显式调用构造函数会返回 None</li><li>Python 中，一个类只能定义一个构造函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_file</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'name:'</span> + self.name)</span><br><span class="line">        print(<span class="string">'age:'</span> + str(self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">"ljl"</span>, <span class="number">12</span>)</span><br><span class="line">s1 = Student(<span class="string">"lyb"</span>, <span class="number">13</span>)</span><br><span class="line">s.print_file()</span><br><span class="line">s1.print_file()</span><br></pre></td></tr></table></figure><h3 id="类变量与实例变量"><a href="#类变量与实例变量" class="headerlink" title="类变量与实例变量"></a>类变量与实例变量</h3><ul><li>类变量属于类的属性，定义在类内，构造方法外</li><li>实例变量属于对象的特征，定义在构造方法内</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类变量</span></span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        <span class="comment"># name和age都是实例变量</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_file</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'name:'</span> + self.name)</span><br><span class="line">        print(<span class="string">'age:'</span> + str(self.age))</span><br><span class="line">        print(<span class="string">'Count: '</span> + str(Student.count))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self)</span>:</span></span><br><span class="line">        Student.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">"ljl"</span>, <span class="number">12</span>)</span><br><span class="line">s1 = Student(<span class="string">"lyb"</span>, <span class="number">13</span>)</span><br><span class="line">s.add()</span><br><span class="line">s.print_file()</span><br><span class="line">s1.add()</span><br><span class="line">s1.print_file()</span><br></pre></td></tr></table></figure><ul><li>对象的<code>__dict__</code>保存着对象的所有变量以及变量的值</li><li>python 对象查找实例变量的流程<ul><li>现在实例变量的列表中查找，如果找到，则直接返回</li><li>如果没有找到，则会在类变量中查找</li><li>如果类变量没有找到，会到父类中找</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类变量</span></span><br><span class="line">    name = <span class="string">"Class Value"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Student()</span><br><span class="line">print(s.name)  <span class="comment"># Class Value, Student并没有定义实例变量name，因此会找到类变量name</span></span><br></pre></td></tr></table></figure><h3 id="self-与实例方法"><a href="#self-与实例方法" class="headerlink" title="self 与实例方法"></a>self 与实例方法</h3><ul><li>实例方法第一个参数必须是 self，必须显式声明，调用实例方法时不用传入 self</li><li>self 只是一个名字，也可以使用其他名字，建议使用 self</li><li>self 代表当前的实例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(this, name, age)</span>:</span></span><br><span class="line">        this.name = name</span><br><span class="line">        this.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">'ljl'</span>, <span class="number">12</span>)</span><br><span class="line">print(p.name)</span><br></pre></td></tr></table></figure><h3 id="实例方法中访问实例变量与类变量"><a href="#实例方法中访问实例变量与类变量" class="headerlink" title="实例方法中访问实例变量与类变量"></a>实例方法中访问实例变量与类变量</h3><ul><li>实例方法中访问实例变量：<code>self.name</code></li><li>实例方法中访问类变量：<code>Student.sum</code>, <code>self.__class__.sum</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类变量</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        <span class="comment"># Student.sum = 12</span></span><br><span class="line">        self.__class__.sum += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">'ljl'</span>, <span class="number">12</span>)</span><br><span class="line">print(Student.sum)</span><br><span class="line">s1 = Student(<span class="string">'ljl'</span>, <span class="number">12</span>)</span><br><span class="line">print(Student.sum)</span><br><span class="line">s2 = Student(<span class="string">'ljl'</span>, <span class="number">12</span>)</span><br><span class="line">print(s2.__class__.sum)</span><br></pre></td></tr></table></figure><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><ul><li>类方法中可以操作类变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类变量</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.__class__.plus_sum()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plus_sum</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls.sum += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student.plus_sum()</span><br><span class="line">Student.plus_sum()</span><br><span class="line">Student.plus_sum()</span><br><span class="line">Student.plus_sum()</span><br><span class="line">s = Student(<span class="string">"ljl"</span>, <span class="number">12</span>)</span><br><span class="line">print(Student.sum)</span><br><span class="line">s.__class__.plus_sum()</span><br><span class="line">print(Student.sum)</span><br></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><ul><li>第一个参数不需要指定特定的对象</li><li>对象和类都可以调用静态方法</li><li>静态方法可以访问类变量: <code>Student.sum1</code></li><li>静态方法和类方法都不能直接访问实例变量</li><li>静态方法相当于普通的方法，与类和实例没有太大关联</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">"ljl"</span>, age=<span class="number">12</span>)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.__class__.sum += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"hello world"</span>)</span><br><span class="line">        print(Student.sum)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Student()</span><br><span class="line">s.hello_world()</span><br><span class="line">Student.hello_world()</span><br></pre></td></tr></table></figure><h3 id="成员可见性"><a href="#成员可见性" class="headerlink" title="成员可见性"></a>成员可见性</h3><ul><li>给变量或实例方法名前加双下划线<code>__name</code>，则该方法或变量名是私有的</li><li>严格来讲，Python 的类是没有私有变量和私有方法，Python 解释器只是把带双下划线的实例变量和实例方法改了一个名字而已，格式：<code>_Student__name</code>，<code>_Student__private_method</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类变量</span></span><br><span class="line">    sum1 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.__name = name  <span class="comment"># 存储时私有变量的名字为_Student__name</span></span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__private_method</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.__name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">'ljl'</span>, <span class="number">12</span>)</span><br><span class="line">print(s.get_name())</span><br><span class="line"><span class="comment"># s.__private_method()  # error</span></span><br><span class="line">s.__name = <span class="string">"lyb"</span>  <span class="comment"># 添加了一个新的实例变量，而不是原来的实例变量，而且新添加的实例变量不是私有的变量</span></span><br><span class="line">print(s.__name)  <span class="comment"># OK</span></span><br><span class="line">print(s.get_name())</span><br><span class="line">s1 = Student(<span class="string">'ljl'</span>, <span class="number">13</span>)</span><br><span class="line">print(s1.__name)  <span class="comment"># error, s1没有新建实例变量__name</span></span><br><span class="line">print(s1._Student__name)  <span class="comment"># ok，可以通过这种方法访问私有变量</span></span><br></pre></td></tr></table></figure><ul><li>静态方法和类方法也可以是私有的</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类变量</span></span><br><span class="line">    sum1 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.__name = name  <span class="comment"># 存储时私有变量的名字为_Student__name</span></span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__private_method</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.__name)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__private_class_method</span><span class="params">(cls)</span>:</span>  <span class="comment"># 私有类方法</span></span><br><span class="line">        print(cls.sum1)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__private_static_method</span><span class="params">()</span>:</span>  <span class="comment"># 私有静态方法</span></span><br><span class="line">        print(<span class="string">"hello"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student.__private_class_method()  <span class="comment"># error</span></span><br><span class="line">s = Student(<span class="string">'ljl'</span>, <span class="number">12</span>)</span><br><span class="line">s.__private_static_method()  <span class="comment"># error</span></span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>继承的目的：避免定义重复变量和方法</li><li>子类可以继承父类的类变量，实例变量，构造方法，实例方法，类方法</li><li>子类可以定义自己特有的实例变量</li><li>可以通过类调用示例方法，但必须传入一个实例对象，<code>Student.method(s)</code>，虽然可以这样做，但不推荐这样做</li><li>在子类的构造函数中可以调用父类的构造函数<ul><li><code>Human.__init__(self, name, age)</code></li><li><code>super(Student, self).__init__(name, age)</code>推荐使用这种方法</li></ul></li><li>super 也可以用在实例方法中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span><span class="params">()</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">super_class_method</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">'super class mthod'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_homework</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'do home'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Human)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, school, name, age)</span>:</span></span><br><span class="line">        self.school = school</span><br><span class="line">        <span class="comment"># Human.__init__(self, name, age)  # 这里不能缺少self</span></span><br><span class="line">        super(Student, self).__init__(name, age)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_homework</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Student, self).do_homework()</span><br><span class="line">        print(<span class="string">'do a lot home'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">'school'</span>, <span class="string">'ljl'</span>, <span class="string">'12'</span>)</span><br><span class="line"></span><br><span class="line">Student.super_class_method()</span><br><span class="line">print(s.name)</span><br><span class="line">print(s.age)</span><br><span class="line">s.do_homework()</span><br><span class="line">print(issubclass(Student, Human)) <span class="comment"># 判断Student是否是Human的子类</span></span><br><span class="line">pritn(isinstance(s, Student)) <span class="comment"># True</span></span><br><span class="line">pritn(isinstance(s, Human)) <span class="comment"># True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h2&gt;&lt;h3 id=&quot;类的定义&quot;&gt;&lt;a href=&quot;#类的定义&quot; class=&quot;headerlink&quot; title=&quot;类的定义&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Python" scheme="http://liujinlongxa.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://liujinlongxa.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(2)</title>
    <link href="http://liujinlongxa.com/2018/09/03/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/"/>
    <id>http://liujinlongxa.com/2018/09/03/Python学习笔记-2/</id>
    <published>2018-09-03T15:03:40.000Z</published>
    <updated>2018-09-03T16:22:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的特点"><a href="#函数的特点" class="headerlink" title="函数的特点"></a>函数的特点</h3><ul><li>功能性：一个函数要有明确的功能</li><li>隐藏细节：调用者不需要关注函数的细节</li><li>函数的目的：减少重复代码</li></ul><h3 id="Python-中函数的定义"><a href="#Python-中函数的定义" class="headerlink" title="Python 中函数的定义"></a>Python 中函数的定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcname</span><span class="params">(parameter_list)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 与Python内置的max函数重名了，会覆盖内置的max函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a &gt; b:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(max(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(func())  <span class="comment"># None，无返回值则默认返回None</span></span><br></pre></td></tr></table></figure><ul><li>参数列表可有可无</li><li>函数内可以<code>return value</code>，如果没有 return，则默认返回 None</li><li>函数必须先定义才能使用</li><li>函数名不能与 Python 内置的函数名重名，否则会覆盖内置函数</li></ul><p>Python 中关于递归函数：</p><ul><li>Python 默认的递归次数是有限的</li><li>可以通过<code>sys.setrecursionlimit(10000)</code>方法来修改递归次数</li></ul><p>关于 print 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span></span><br><span class="line">print(a, b, c) <span class="comment"># 分别打印a, b, c</span></span><br></pre></td></tr></table></figure><h3 id="Python-中函数可以返回多个值"><a href="#Python-中函数可以返回多个值" class="headerlink" title="Python 中函数可以返回多个值"></a>Python 中函数可以返回多个值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(num)</span>:</span></span><br><span class="line">    a = num * <span class="number">2</span></span><br><span class="line">    b = num * <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> a, b</span><br><span class="line"></span><br><span class="line">ret = func(<span class="number">10</span>)  <span class="comment"># ret是一个元组</span></span><br><span class="line">print(ret)</span><br><span class="line">a, b = func(<span class="number">10</span>)  <span class="comment"># 推荐的做法，序列解包，不要使用元组[序号]</span></span><br><span class="line">print(a, b)</span><br></pre></td></tr></table></figure><h3 id="Python-中的序列解包和链式赋值"><a href="#Python-中的序列解包和链式赋值" class="headerlink" title="Python 中的序列解包和链式赋值"></a>Python 中的序列解包和链式赋值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">d = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>  <span class="comment"># a是一个元组</span></span><br><span class="line">a, b, c = d  <span class="comment"># 序列解包</span></span><br><span class="line">a = b = c = <span class="number">1</span> <span class="comment"># 链式赋值</span></span><br></pre></td></tr></table></figure><h3 id="必须参数和关键字参数"><a href="#必须参数和关键字参数" class="headerlink" title="必须参数和关键字参数"></a>必须参数和关键字参数</h3><ul><li>必须参数：函数参数列表中定义的，必须传递的参数，如果不传则会编译错误</li><li>关键字参数：明确指定参数的值，可以无视参数的顺序</li><li>如果参数列表中既有必须参数，又有关键字参数，则关键字参数必须位于必须参数之后</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret = add(<span class="number">12</span>, <span class="number">13</span>)  <span class="comment"># 以必须参数的形式调用</span></span><br><span class="line">print(ret)</span><br><span class="line">ret1 = add(num2=<span class="number">13</span>, num1=<span class="number">14</span>)  <span class="comment"># 以关键字参数的形式调用</span></span><br><span class="line">print(ret1)</span><br><span class="line">ret2 = add(<span class="number">14</span>, num2=<span class="number">15</span>)  <span class="comment"># Ok, 关键字参数可以在必须参数之后</span></span><br><span class="line">print(ret2)</span><br><span class="line">ret3 = add(num1=<span class="number">14</span>, <span class="number">15</span>)  <span class="comment"># error，关键字参数不能在必须参数前</span></span><br><span class="line">print(ret3)</span><br></pre></td></tr></table></figure><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><ul><li>默认参数必须位于参数列表的最后</li><li>默认参数既可以使用关键字参数，也可以使用必须参数，也可以不传</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num1, num2, num3=<span class="number">3</span>, num4=<span class="number">4</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2 + num3 + num4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(add(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>))</span><br><span class="line">print(add(<span class="number">10</span>, <span class="number">20</span>, num4=<span class="number">40</span>, num3=<span class="number">30</span>))</span><br><span class="line">print(add(<span class="number">10</span>, <span class="number">20</span>, num4=<span class="number">40</span>))</span><br><span class="line">print(add(<span class="number">10</span>, <span class="number">20</span>, num3=<span class="number">30</span>))</span><br><span class="line">print(add(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>))</span><br><span class="line">print(add(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line">print(add(num1=<span class="number">10</span>, num2=<span class="number">20</span>))</span><br><span class="line">print(add(num2=<span class="number">20</span>, num1=<span class="number">10</span>))</span><br></pre></td></tr></table></figure><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><ul><li>可变参数，给参数名前加一个星号<code>*</code></li><li>传递参数是，可以传一个元组或列表，前面要加一个星号<code>*</code></li><li>可变参数之后可以有关键字参数，但不能有必须参数，必须参数必须位于可变参数之前，默认参数也要使用关键字参数的形式进行调用</li><li>可以参数也可以什么都不传，相当于传一个空的元组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(*param)</span>:</span></span><br><span class="line">    print(param)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">fun(*a)  <span class="comment"># *相当于展开元组内的元素</span></span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">fun(*b)  <span class="comment"># 同上</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">(num1, *param)</span>:</span></span><br><span class="line">    print(param)</span><br><span class="line">    print(num1)</span><br><span class="line"></span><br><span class="line">fun1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># (2, 3, 4), 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可变参数后有关键字参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">(num1, *param, num2, num3=<span class="number">3</span>)</span>:</span></span><br><span class="line">    print(param)</span><br><span class="line">    print(num1)</span><br><span class="line">    print(num2)</span><br><span class="line">    print(num3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, num2=<span class="number">13</span>) <span class="comment"># 1, (2, 3, 4), 13, 3</span></span><br><span class="line">fun1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, num2=<span class="number">13</span>, num3=<span class="number">14</span>) <span class="comment"># 1, (2, 3, 4), 13, 14</span></span><br><span class="line">fun1(<span class="number">1</span>, num2 = <span class="number">13</span>, num3 = <span class="number">14</span>) <span class="comment"># 1, (), 13, 14 可变参数为空元组</span></span><br></pre></td></tr></table></figure><h3 id="关键字可变参数"><a href="#关键字可变参数" class="headerlink" title="关键字可变参数"></a>关键字可变参数</h3><ul><li>参数前加两个星号<code>**</code></li><li>传递参数时需要传一个字典或使用关键字参数进行调用</li><li>可以参数也可以什么都不传，相当于传一个空的字典</li><li>关键字可变参数必须位于参数列表的最后</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(**param)</span>:</span></span><br><span class="line">    print(param)  <span class="comment"># param是一个字典</span></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> param.items():</span><br><span class="line">        print(<span class="string">'key:'</span> + key + <span class="string">', value: '</span> + str(value))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun(num1=<span class="number">1</span>, num2=<span class="number">2</span>, num3=<span class="number">3</span>)</span><br><span class="line">a = &#123;<span class="string">'aa'</span>: <span class="number">1</span>, <span class="string">'bb'</span>: <span class="number">2</span>&#125;</span><br><span class="line">fun(**a)  <span class="comment"># 相当于解包a</span></span><br><span class="line">fun()  <span class="comment"># &#123;&#125; , 可变参数也可以什么都不传，相当于传一个空字典</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(num1, **param)</span>:</span></span><br><span class="line">    print(param)  <span class="comment"># param是一个字典</span></span><br><span class="line">    print(num1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line">fun(<span class="number">1</span>, **a)</span><br></pre></td></tr></table></figure><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">50</span> <span class="comment"># 全局变量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    c = a + b  <span class="comment"># c 相当于一个新的局部变量，覆盖了外部的变量</span></span><br><span class="line">    print(c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 3</span></span><br><span class="line">print(c)  <span class="comment"># 50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">9</span>):</span><br><span class="line">    a = <span class="number">12</span></span><br><span class="line">    print(i)</span><br><span class="line">print(a)  <span class="comment"># 循环外部可以引用循环内部的变量，Python没有块级作用域</span></span><br></pre></td></tr></table></figure><h3 id="global-关键字"><a href="#global-关键字" class="headerlink" title="global 关键字"></a>global 关键字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a  <span class="comment"># 将a提升为全局作用域，a可以通过import导入其他模块</span></span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">fun()</span><br><span class="line">print(a) <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">12</span> <span class="comment"># 全局作用域</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> b</span><br><span class="line">    b = b + num  <span class="comment"># 修改全局作用域的变量b</span></span><br><span class="line"></span><br><span class="line">fun1(<span class="number">11</span>)</span><br><span class="line">print(b) <span class="comment"># 23</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h3 id=&quot;函数的特点&quot;&gt;&lt;a href=&quot;#函数的特点&quot; class=&quot;headerlink&quot; title=&quot;函数的特点&quot;&gt;&lt;/a&gt;函数的特
      
    
    </summary>
    
      <category term="Python" scheme="http://liujinlongxa.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://liujinlongxa.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(1)</title>
    <link href="http://liujinlongxa.com/2018/09/01/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
    <id>http://liujinlongxa.com/2018/09/01/Python学习笔记-1/</id>
    <published>2018-09-01T00:26:31.000Z</published>
    <updated>2019-01-13T03:53:57.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="除，整除"><a href="#除，整除" class="headerlink" title="除，整除"></a>除，整除</h3><p>与其他语言不通，<code>/</code>是除法，得到的 float 类型，要得到整型需要用<code>//</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type(<span class="number">2</span>/<span class="number">2</span>) <span class="comment"># float</span></span><br><span class="line">type(<span class="number">2</span>//<span class="number">2</span>) <span class="comment"># int</span></span><br><span class="line"><span class="number">1</span>//<span class="number">2</span> <span class="comment"># 0</span></span><br><span class="line"><span class="number">1</span>/<span class="number">2</span> <span class="comment"># 0.5</span></span><br></pre></td></tr></table></figure><h3 id="二进制，八进制，十六进制"><a href="#二进制，八进制，十六进制" class="headerlink" title="二进制，八进制，十六进制"></a>二进制，八进制，十六进制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0b10</span> <span class="comment"># 2进制</span></span><br><span class="line"><span class="number">0o10</span> <span class="comment"># 8进制</span></span><br><span class="line"><span class="number">0x10</span> <span class="comment"># 16进制</span></span><br><span class="line"><span class="comment"># 将一个数转为二进制</span></span><br><span class="line">bin(<span class="number">12</span>)</span><br><span class="line"><span class="comment"># 将一个数转为10进制</span></span><br><span class="line">int(<span class="number">0x12</span>)</span><br><span class="line"><span class="comment"># 将一个数转为16进制</span></span><br><span class="line">hex(<span class="number">12131</span>)</span><br><span class="line"><span class="comment"># 将一个数转为8进制</span></span><br><span class="line">oct(<span class="number">0x1231</span>)</span><br></pre></td></tr></table></figure><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>布尔类型有两个值，<code>True</code>与<code>False</code></p><ul><li>对于整数来说，非 0 可以转为<code>True</code>，0 可以转为<code>False</code></li><li>对于字符串来说，空字符串可以转为<code>False</code>，其他字符串可以转为<code>True</code></li><li>对于列表和元组等序列来说，空序列可以转为<code>False</code>，序列中有元素可以转为<code>True</code></li><li>对集合和字典来说，空字典，空集合可以转为<code>False</code>，字典或序列中有元素可以转为<code>True</code></li><li>None 也可以转为<code>False</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> num1:</span><br><span class="line">    print(<span class="string">'YES'</span>)  <span class="comment"># YES</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'NO'</span>)</span><br><span class="line"></span><br><span class="line">num2 = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> num2:</span><br><span class="line">    print(<span class="string">'YES'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'NO'</span>)  <span class="comment"># NO</span></span><br><span class="line"></span><br><span class="line">list1 = []</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">if</span> list1:</span><br><span class="line">    print(<span class="string">'YES'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'NO'</span>)  <span class="comment"># NO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> list2:</span><br><span class="line">    print(<span class="string">'YES'</span>)  <span class="comment"># YES</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'NO'</span>)</span><br><span class="line"></span><br><span class="line">dict1 = &#123;&#125;</span><br><span class="line">dict2 = &#123;<span class="number">1</span>: <span class="string">'A'</span>, <span class="number">2</span>: <span class="string">'B'</span>&#125;</span><br><span class="line"><span class="keyword">if</span> dict1:</span><br><span class="line">    print(<span class="string">'YES'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'NO'</span>)  <span class="comment"># NO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> dict2:</span><br><span class="line">    print(<span class="string">'YES'</span>)  <span class="comment"># YES</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'NO'</span>)</span><br></pre></td></tr></table></figure><h3 id="单引号和双引号"><a href="#单引号和双引号" class="headerlink" title="单引号和双引号"></a>单引号和双引号</h3><ul><li>单引号：单引号可以包含双引号，例如：<code>&#39;My name is &quot;ljl&quot;&#39;</code></li><li>双引号：双引号也可以包含单引号，例如：<code>&quot;Let&#39;s go&quot;</code></li></ul><h3 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h3><p>多行文本可以用三个双引号表示，也可以用三个单引号表示，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Hello!</span></span><br><span class="line"><span class="string">My name is Liuijinlong.</span></span><br><span class="line"><span class="string">What is your name?</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Hello!</span></span><br><span class="line"><span class="string">My name is Liuijinlong.</span></span><br><span class="line"><span class="string">What is your name?</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><ul><li>要显示字符串的格式要使用<code>print</code>函数</li><li>idle 会把字符串中的格式变为转义字符，如下：</li></ul><p><img src="http://blog.shicishuzhai.com/094e3ce9743b9dafadb426041996058b.png" alt="1"></p><h3 id="原始字符"><a href="#原始字符" class="headerlink" title="原始字符"></a>原始字符</h3><p>在字符串前加一个 r，字符串中的转义字符不会被解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">r'aaa \n aaa'</span>) <span class="comment"># aaa \n aaa</span></span><br></pre></td></tr></table></figure><h3 id="字符串的操作"><a href="#字符串的操作" class="headerlink" title="字符串的操作"></a>字符串的操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">"Hello"</span></span><br><span class="line">s2 = <span class="string">"World"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼接</span></span><br><span class="line">s = s1 + s2</span><br><span class="line">print(s)  <span class="comment"># HelloWorld</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取，切片操作</span></span><br><span class="line">print(s[<span class="number">2</span>])  <span class="comment"># l</span></span><br><span class="line">print(s[<span class="number">2</span>: <span class="number">5</span>])  <span class="comment"># llo</span></span><br><span class="line">print(s[<span class="number">2</span>: <span class="number">-3</span>])  <span class="comment"># lloWo</span></span><br><span class="line"></span><br><span class="line">print(s1 * <span class="number">2</span>)  <span class="comment"># 重复字符串：HelloHello</span></span><br><span class="line">print(len(s1))  <span class="comment"># 字符串长度：5</span></span><br><span class="line">print(s1.count(<span class="string">'l'</span>))  <span class="comment"># l在字符串中出现的次数</span></span><br><span class="line">print(s1.find(<span class="string">'ell'</span>))  <span class="comment"># 查找字符串，返回第一次出现的位置，返回-1表示未找到</span></span><br><span class="line">print(s1.index(<span class="string">'ell'</span>))  <span class="comment"># 返回首次出现的位置，与find方法类似，如果未找到会返回错误</span></span><br><span class="line">print(s1.endswith(<span class="string">'lo'</span>))  <span class="comment"># 是否以lo结尾</span></span><br><span class="line">print(s1.startswith(<span class="string">'he'</span>))  <span class="comment"># 是否以he开头</span></span><br><span class="line">print(s1.isalnum())  <span class="comment"># 返回是否至少有一个字符并且都是是字母或数字</span></span><br><span class="line">print(s1.isalpha())  <span class="comment"># 返回是否至少有一个字符并且都是字母</span></span><br><span class="line">print(s1.isdigit())  <span class="comment"># 返回是否至少有一个字符并且都是数字</span></span><br><span class="line">print(s1.islower())  <span class="comment"># 返回是否至少有一个字符并且都是小写字母</span></span><br><span class="line">print(s1.isupper())  <span class="comment"># 返回是否至少有一个字符并且都是大写字母</span></span><br><span class="line">print(<span class="string">' '</span>.join([s1, s2]))  <span class="comment"># 合并s1, s2，已空格分割</span></span><br><span class="line">print((s1 + <span class="string">' '</span> + s2).split(<span class="string">' '</span>))  <span class="comment"># 按指定分隔符分割字符串</span></span><br><span class="line">print(s1.title())  <span class="comment"># 返回首字母大写的字符串</span></span><br><span class="line">print(s1.strip()) <span class="comment"># 去掉s1前后的空格</span></span><br></pre></td></tr></table></figure><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"Liujinlong"</span></span><br><span class="line">print(<span class="string">"My name is %s"</span> % name)</span><br><span class="line">pi = <span class="number">3.14</span></span><br><span class="line">print(<span class="string">"Pi is %.2f"</span> % pi)</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">"Hello"</span></span><br><span class="line">str2 = <span class="string">"World"</span></span><br><span class="line">print(<span class="string">"%s %s"</span> % (str1, str2))</span><br><span class="line"></span><br><span class="line">msg = &#123;<span class="string">"action"</span>: str1, <span class="string">"name"</span>: str2&#125;</span><br><span class="line">print(<span class="string">"%(action)s %(name)s"</span> % msg)</span><br><span class="line">print(<span class="string">"&#123;0&#125; &#123;1&#125;"</span>.format(str1, str2))</span><br><span class="line">print(<span class="string">"&#123;action&#125; &#123;name&#125;"</span>.format(**msg)) <span class="comment"># 双星号相当于解包字典</span></span><br></pre></td></tr></table></figure><h2 id="Python-中的列表"><a href="#Python-中的列表" class="headerlink" title="Python 中的列表"></a>Python 中的列表</h2><h3 id="列表的定义"><a href="#列表的定义" class="headerlink" title="列表的定义"></a>列表的定义</h3><ul><li>列表中元素的类型是任意的</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="string">"ljl"</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="keyword">True</span>]</span><br><span class="line">c = list()</span><br></pre></td></tr></table></figure><h3 id="列表的操作"><a href="#列表的操作" class="headerlink" title="列表的操作"></a>列表的操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">l2 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">print(l1 + l2)  <span class="comment"># 合并</span></span><br><span class="line">print(l1 * <span class="number">2</span>)  <span class="comment"># 重复</span></span><br><span class="line">print(l1[<span class="number">2</span>])  <span class="comment"># 获取</span></span><br><span class="line">print(l1[<span class="number">2</span>: <span class="number">4</span>])  <span class="comment"># 切片操作</span></span><br><span class="line">l1.append(<span class="number">3</span>)  <span class="comment"># 添加元素</span></span><br><span class="line">print(l1.count(<span class="number">3</span>))  <span class="comment"># 列表中某个元素的个数</span></span><br><span class="line">print(len(l1))  <span class="comment"># 列表长度</span></span><br><span class="line">print(l1.index(<span class="number">3</span>))  <span class="comment"># 某个元素在列表中的位置，未找到返回错误</span></span><br><span class="line">l1.extend(l2)  <span class="comment"># 将l2的所有元素添加到l1中</span></span><br><span class="line">print(l1)</span><br><span class="line">l1.insert(<span class="number">11</span>, <span class="number">2</span>)  <span class="comment"># 在指定位置添加元素</span></span><br><span class="line">print(l1)</span><br><span class="line">l1.pop()  <span class="comment"># 删除列表末尾元素</span></span><br><span class="line">print(l1)</span><br><span class="line">l1.remove(<span class="string">'a'</span>)  <span class="comment"># 删除指定元素</span></span><br><span class="line">print(l1)</span><br><span class="line">l1.reverse()  <span class="comment"># 逆序列表</span></span><br><span class="line">print(l1)</span><br><span class="line">l1 = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>]</span><br><span class="line">l1.sort()  <span class="comment"># 列表排序</span></span><br><span class="line">print(l1)</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a.append(<span class="number">4</span>)</span><br><span class="line">print(a) <span class="comment"># 1, 2, 3, 4</span></span><br><span class="line">a.extend([<span class="number">5</span>]) <span class="comment"># 1, 2, 3, 4, 5</span></span><br><span class="line">print(a)</span><br><span class="line">a.append([<span class="number">6</span>, <span class="number">7</span>]) <span class="comment"># [1, 2, 3, 4, 5, [6, 7]]</span></span><br><span class="line">print(a)</span><br><span class="line">a.extend([<span class="number">8</span>, <span class="number">9</span>]) <span class="comment"># [1, 2, 3, 4, 5, [6, 7], 8, 9]</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># extend会自动把要添加的列表逐一添加到原列表模块，append是将元素直接添加到列表末尾</span></span><br><span class="line"></span><br><span class="line">value = a.pop()  <span class="comment"># 删除列表中最后一个元素并返回这个元素</span></span><br><span class="line">print(value)</span><br><span class="line">print(a)</span><br><span class="line">a.remove(<span class="number">3</span>)  <span class="comment"># 删除列表中值为3的元素</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="keyword">del</span>(a[<span class="number">0</span>:<span class="number">3</span>]) <span class="comment"># 删除a中第0到3位置上的元素</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><ul><li>列表与元组的区别<ul><li>列表时可变的，元组不可变</li><li>元组可以作为字典的 key，但是列表不行</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="keyword">True</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)[<span class="number">1</span>]</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)[<span class="number">0</span>:<span class="number">3</span>] <span class="comment"># 得到一个元素</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) + (<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>) <span class="comment"># (1, 2, 3, 3, 3, 3)</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) * <span class="number">3</span> <span class="comment"># (1, 2, 3, 1, 2, 3, 1, 2, 3)</span></span><br><span class="line">type((<span class="number">1</span>)) <span class="comment"># int，这是因为内层括被解析成了数学运算的括号</span></span><br><span class="line">type((<span class="number">1</span>,)) <span class="comment"># tuple</span></span><br><span class="line">min((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))  <span class="comment"># 最小值</span></span><br><span class="line">max((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))  <span class="comment"># 最大值</span></span><br><span class="line">(,) <span class="comment"># 空元组</span></span><br></pre></td></tr></table></figure><h3 id="序列的总结"><a href="#序列的总结" class="headerlink" title="序列的总结"></a>序列的总结</h3><ul><li>str list tuple 都属于序列</li><li>每个元素都会分配一个序号</li><li>都支持切片操作</li><li>支持包含操作：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'or'</span> <span class="keyword">in</span> <span class="string">'Hello world'</span>)  <span class="comment"># True</span></span><br><span class="line">print(<span class="number">1</span> <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  <span class="comment"># True</span></span><br><span class="line">print(<span class="string">'a'</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="number">12</span>))  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><ul><li>长度：<code>len([1, 2, 3])</code></li><li>最大最小：<code>max([1, 2, 3]), min([1, 2, 3])</code></li></ul><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ul><li>集合 Set 的特点<ul><li>元素是无序的</li><li>元素是不重复的</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">len(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;) <span class="comment"># 3</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">in</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment"># True</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment"># True</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125; - &#123;<span class="number">3</span>, <span class="number">4</span>&#125; <span class="comment"># 求两个集合的差集</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125; &amp; &#123;<span class="number">3</span>, <span class="number">4</span>&#125; <span class="comment"># 求两个集合的交集</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125; | &#123;<span class="number">3</span>, <span class="number">4</span>&#125; <span class="comment"># 求两个集合的并集</span></span><br><span class="line">set() <span class="comment"># 空集合</span></span><br></pre></td></tr></table></figure><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><ul><li>Key 不能重复</li><li>Key 必须是不可变的类型<ul><li>列表是可变的，所以不能作为字典的 key</li><li>int，元组，bool 都是不可变的</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">empty = &#123;&#125;  <span class="comment"># 空字典</span></span><br><span class="line">user = &#123;<span class="string">"name"</span>: <span class="string">"ljl"</span>, <span class="string">"age"</span>:<span class="number">12</span>&#125;</span><br><span class="line">print(user[<span class="string">"name"</span>])</span><br><span class="line">user[<span class="string">"school"</span>] = <span class="string">"tyut"</span></span><br><span class="line">user.update(&#123;<span class="string">"address"</span>: <span class="string">"shenzhen"</span>&#125;)</span><br><span class="line"><span class="keyword">del</span>(user[<span class="string">"address"</span>])  <span class="comment"># 删除某个key</span></span><br><span class="line">print(user)</span><br><span class="line">user.clear()  <span class="comment"># 清空</span></span><br><span class="line">print(user)</span><br><span class="line">print(user.keys())  <span class="comment"># 所有key</span></span><br><span class="line">print(user.values())  <span class="comment"># 所有value</span></span><br><span class="line">print(<span class="string">'address'</span> <span class="keyword">in</span> user)  <span class="comment"># 是否包含某个key</span></span><br></pre></td></tr></table></figure><h2 id="变量和运算符"><a href="#变量和运算符" class="headerlink" title="变量和运算符"></a>变量和运算符</h2><h3 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h3><ul><li>Python 中的变量就是一个值的别名</li><li>原则：变量名要有意义</li></ul><h3 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h3><ul><li>变量名的首字符不能是数字</li><li>只能包含字母，数字，下划线</li><li>系统的关键字不能用作变量名，非系统保留关键字，但是标准库函数的，也不要使用，例如：type</li><li>变量区分大小写</li></ul><h3 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h3><ul><li>值类型：int, str, tuple</li><li>引用类型：list, set, dict</li><li><code>id()</code>: 显示变量内存地址</li></ul><h3 id="list-与-tuple"><a href="#list-与-tuple" class="headerlink" title="list 与 tuple"></a>list 与 tuple</h3><ul><li>list 是可改变的</li><li>tuple 是不可改变的</li><li>使用原则：能用元组尽量用元组，因为元组不可改变，更为安全</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">11</span> <span class="comment"># OK</span></span><br><span class="line">b = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b[<span class="number">0</span>] = <span class="number">11</span> <span class="comment"># error</span></span><br></pre></td></tr></table></figure><h3 id="运算符号"><a href="#运算符号" class="headerlink" title="运算符号"></a>运算符号</h3><ul><li>数学运算符：<code>+-*/</code></li><li>整除：<code>//</code></li><li>余数：<code>%</code></li><li>乘方：<code>**</code> 例如，<code>2**2 = 4</code></li><li>赋值运算符：<code>=, +=, -=, *=, /=, %=, **=, //=</code></li><li>比较运算符：<code>==, !=, &gt;=, &gt;, &lt;=, &lt;</code><ul><li>字符串，bool 都可以比较，字符串转为 ascii 码进行比较，bool 则是 True 转为 1，False 转为 0</li><li>比较返回一个 bool 值</li><li>列表，元组都可以比较，比较的规则是一个一个元素进行比较，直到比较出结果</li></ul></li><li>逻辑运算符：<code>and, or, not</code><ul><li>非 Bool 类型也可以进行逻辑运算，规则是将非 Bool 类型先转为 Bool 类型再进行计算</li><li>int, float 转为 bool，0 为 False，非 0 为 True</li><li>字符串转为 bool，空字符串为 False，非空字符串为 True</li><li>列表转为 bool，空列表为 False，非空列表为 True</li><li>元组，set，dict 与列表一样</li><li>举例：<ul><li><code>2 and 1 # 1</code></li><li><code>1 and 2 # 2</code></li><li><code>1 or 2 # 1</code></li><li><code>0 or 1 # 1</code></li><li>返回的值符合就近原则，例如<code>2 and 1</code>，更具左边的元素 2 无法判断出结果，读取 1 后，可以判断出结构，所有返回 1，<code>1 or 2</code>根据左边的元素 1 就直接可以判断出表达式的值，所以直接返回 1</li></ul></li></ul></li><li>成员运算符：<code>in, not in</code><ul><li>一个元素是否在另外的一组元素中</li><li>返回 bool 类型</li><li>可以作用于：列表，字符串，元组，set，dict</li><li>字典判断的是 key</li></ul></li><li>身份运算符：is, not is<ul><li>比较的是两个变量的内存地址是否相等</li><li>对象的三个特征：值，类型，身份</li><li>判断类型 type(a): <code>type(a) == int</code></li><li>推荐使用 isinstance()方法进行类型判断，例如：<code>isinstance(a, int), isinstance(a, (int, float, str))</code></li></ul></li><li>位运算符：&amp;, |, ^, ~, &lt;&lt;, &gt;&gt;</li></ul><p>特殊的地方：</p><ul><li>Python 没有自增，自减操作</li></ul><h2 id="分支，循环，条件，枚举"><a href="#分支，循环，条件，枚举" class="headerlink" title="分支，循环，条件，枚举"></a>分支，循环，条件，枚举</h2><h3 id="什么是表达式"><a href="#什么是表达式" class="headerlink" title="什么是表达式"></a>什么是表达式</h3><ul><li>表达式是运算符和操作数所构成的序列</li></ul><h3 id="表达式优先级"><a href="#表达式优先级" class="headerlink" title="表达式优先级"></a>表达式优先级</h3><ul><li>and 的优先级大于 or，not &gt; and &gt; or</li><li>解析表达式的顺序：<ul><li>相同优先级从左向右，左结合</li><li>使用括号改变优先级</li><li>赋值运算符是右结合</li></ul></li></ul><h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><ul><li>if, if-else</li><li>pass 空语句</li><li>while 语句， while-else（循环退出时，执行 else）</li><li>for: 遍历集合，序列，字典，for-else(遍历完成，执行 else)</li><li>break：跳出循环，从 break 退出循环，不会执行 else 语句</li><li>continue: 跳过本次循环</li><li>range 函数，第一个参数为起始位置，第二个参数为序列元素个数，第三个参数为步长</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> a &lt; <span class="number">10</span>:</span><br><span class="line">    print(a)</span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'Over'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    print(i)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'Over'</span>)  <span class="comment"># Over不会打印，因为循环break了</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">5</span> &lt; num &lt; <span class="number">20</span>:  <span class="comment"># 可以使用这种判断条件</span></span><br><span class="line">  print(<span class="string">"hello"</span>)</span><br></pre></td></tr></table></figure><h3 id="Comprehension"><a href="#Comprehension" class="headerlink" title="Comprehension"></a>Comprehension</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># List Comprehension</span></span><br><span class="line">numbers = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>)]  <span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line">print(numbers)</span><br><span class="line">numbers = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]  <span class="comment"># [0, 2, 4, 6, 8]</span></span><br><span class="line">print(numbers)</span><br><span class="line">strings = [[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>], [<span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>], [<span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>]]</span><br><span class="line">faltten = [int(i) <span class="keyword">for</span> item <span class="keyword">in</span> strings <span class="keyword">for</span> i <span class="keyword">in</span> item]</span><br><span class="line">print(faltten) <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line">xSamples = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line">ySamples = [<span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">points = [(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> xSamples <span class="keyword">for</span> y <span class="keyword">in</span> ySamples <span class="keyword">if</span> x != y]</span><br><span class="line">print(points) <span class="comment"># [(2, 6), (2, 8), (5, 2), (5, 6), (5, 8), (8, 2), (8, 6)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set Comprehension</span></span><br><span class="line">numbers = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>)&#125;</span><br><span class="line">print(numbers)  <span class="comment"># &#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dictionary Comprehension</span></span><br><span class="line">dicts = &#123;i: str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>)&#125;</span><br><span class="line">print(dicts)  <span class="comment"># &#123;0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9'&#125;</span></span><br></pre></td></tr></table></figure><h2 id="包，模块，类，函数与变量"><a href="#包，模块，类，函数与变量" class="headerlink" title="包，模块，类，函数与变量"></a>包，模块，类，函数与变量</h2><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><ul><li>一个文件夹就是一个包，包名就是文件名</li><li>子包：文件夹里还有一个文件夹</li><li>文件夹里必须有一个<code>__init__.py</code>文件</li></ul><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul><li>一个文件就是一个模块，模块名就是文件名</li><li>不同包的相同模块在引用是使用：<code>包名.模块名</code></li><li><code>__init__.py</code>文件也是一个模块</li></ul><h3 id="导入另外一个模块"><a href="#导入另外一个模块" class="headerlink" title="导入另外一个模块"></a>导入另外一个模块</h3><p>导入一个模块有两种方法，import 和 from-import</p><h4 id="import-导入"><a href="#import-导入" class="headerlink" title="import 导入"></a>import 导入</h4><ul><li>语法：<code>import package1</code></li><li>import 导入的是一个模块，使用模块里的变量名时需要带上模块名，例如<code>package1.a</code></li><li>可以使用 as 关键字给模块起一个别名</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> test</span><br><span class="line">print(test.a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> package.modual <span class="keyword">as</span> p1</span><br><span class="line">print(p1.a)</span><br></pre></td></tr></table></figure><h4 id="from-import-导入"><a href="#from-import-导入" class="headerlink" title="from-import 导入"></a>from-import 导入</h4><ul><li>语法：<code>from module import a</code></li><li>from-input 可以直接导入变量，例如<code>from package.module import a</code></li><li>from-input 可以导入模块<code>from package import module</code></li><li>使用<em>引入所有变量：`from test import </em>`</li><li>指定使用*时模块可导出的变量：使用内置变量<code>__all__</code></li><li>引入多个变量：<code>from test import a, b, c</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> test <span class="keyword">import</span> a</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> test <span class="keyword">import</span> *</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line">__all__ = [<span class="string">'a'</span>, <span class="string">'c'</span>] <span class="comment"># 指定使用*导入是，只导入a和c两个变量</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">c = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> test <span class="keyword">import</span> *</span><br><span class="line">print(a)</span><br><span class="line">print(c)</span><br><span class="line">print(b) <span class="comment"># ERROR</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> test <span class="keyword">import</span> b</span><br><span class="line">print(b) <span class="comment"># OK</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入多个变量换行</span></span><br><span class="line"><span class="keyword">from</span> test <span class="keyword">import</span> a, b, c, d,\</span><br><span class="line">e, f, g</span><br><span class="line"><span class="keyword">from</span> test <span class="keyword">import</span> (a, b, c, d,</span><br><span class="line">e, f, g)</span><br></pre></td></tr></table></figure><h3 id="input-py文件"><a href="#input-py文件" class="headerlink" title="__input__.py文件"></a><code>__input__.py</code>文件</h3><ul><li>导入包或者包内的某个模块时，<code>__init__.py</code>会被自动执行，可以做一些初始化的工作</li><li><code>__init__.py</code> 的应用场景：<ul><li>决定哪些模块可以被导出</li><li>批量导入某些模块，在使用包是不需要再次导入</li><li>做一些包的初始化工作</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __init__.py 包名：t</span></span><br><span class="line">__all__ = [<span class="string">'module1'</span>, <span class="string">'module3'</span>] <span class="comment"># 只有module1和module2两个模块可以被导出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量导入</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"><span class="comment"># other.py</span></span><br><span class="line"><span class="keyword">import</span> t</span><br><span class="line">print(t.sys.path)</span><br></pre></td></tr></table></figure><h3 id="包和模块的几个常见问题"><a href="#包和模块的几个常见问题" class="headerlink" title="包和模块的几个常见问题"></a>包和模块的几个常见问题</h3><ul><li>包和模块是不会重复导入的</li><li>避免循环导入，即 A 模块导入 B 模块，B 模块又导入 A 模块，这样编译器会报错</li><li>导入模块时就会执行模块里的代码，但只会执行一次</li></ul><h3 id="模块里的变量"><a href="#模块里的变量" class="headerlink" title="模块里的变量"></a>模块里的变量</h3><p>可以使用 dir()可以打印出模块里的所有变量，<code>dic(module)</code>打印模块中所有的变量</p><ul><li><code>__name__</code>: 模块的完整名称，包括包名<code>package.module</code></li><li><code>__package__</code>: 模块所属的包名</li><li><code>__file__</code>: 模块文件的完整路径</li><li><code>__doc__</code>: 模块的注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># module1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">This is doc</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(__name__)</span><br><span class="line">print(__file__)</span><br><span class="line">print(__package__)</span><br><span class="line">print(__doc__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="comment">#package.module</span></span><br><span class="line"><span class="comment">#/Users/liujinlong/Documents/Study/Python/package/module.py</span></span><br><span class="line"><span class="comment">#package</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#This is doc</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>如果一个模块被当成应用程序执行的入口(直接通过<code>pyton xxx.py</code>执行)，则上面的几个变量就会变。</p><ul><li><code>__name__</code>变为<code>__main__</code></li><li><code>__package__</code>为空</li><li><code>__file__</code>为是执行路径与模块文件名的相对路径，与执行路径有关</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"__name__ :"</span> + (__name__ <span class="keyword">or</span> <span class="string">"None"</span>))</span><br><span class="line">print(<span class="string">"__package__:"</span> + (__package__ <span class="keyword">or</span> <span class="string">"None"</span>))</span><br><span class="line">print(<span class="string">'__doc__:'</span> + __doc__)</span><br><span class="line">print(<span class="string">'__file__: '</span> + __file__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line"><span class="comment">#__name__ :__main__</span></span><br><span class="line"><span class="comment">#__package__:None</span></span><br><span class="line"><span class="comment">#__doc__:</span></span><br><span class="line"><span class="comment">#this is doc</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#__file__: test2.py</span></span><br></pre></td></tr></table></figure><h3 id="name-的应用"><a href="#name-的应用" class="headerlink" title="__name__的应用"></a><code>__name__</code>的应用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>上面的语句是标明的 Python 文件既可以作为模块，也可以作为 app 的入口文件</p><h3 id="相对导入和绝对导入"><a href="#相对导入和绝对导入" class="headerlink" title="相对导入和绝对导入"></a>相对导入和绝对导入</h3><ul><li>顶级包和入口文件有关，入口文件所在的文件夹并不是顶级包</li><li>绝对导入：从顶级包开始导入 <code>import package1.package2.module</code>或<code>from package1.package2 import module1</code></li><li>相对导入：<code>from .m3 import *</code>，相对导入只能用于<code>from-import</code><ul><li>入口文件不能用相对导入，因为<code>__main__</code>这个模块是不存在的，除非使用<code>python -m</code></li><li>.当前文件夹</li><li>..上一层文件夹</li><li>…上上层文件夹</li></ul></li><li>注意事项：与入口文件同级目录下不要再有其他模块</li></ul><p>示例，如下图目录结构：</p><p><img src="http://blog.shicishuzhai.com/fb3913861d028acf0475d26ce685031e.png" alt="2"></p><p>要在<code>main.py</code>中引入其他模块，不能使用相对导入，只能使用绝对导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">import</span> package1.module1_1</span><br><span class="line"><span class="keyword">import</span> package1.package1_1.module1_1_1 <span class="keyword">as</span> m1_1_1</span><br><span class="line"><span class="keyword">from</span> package2.package2_1 <span class="keyword">import</span> module2_1_1</span><br><span class="line"></span><br><span class="line">m1_1_1.test() <span class="comment"># test是定义在module1_1_1中的一个方法</span></span><br></pre></td></tr></table></figure><p>在<code>module1_1_2.py</code>中导入其他模块可以使用相对导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> module1_1_1</span><br><span class="line"><span class="keyword">from</span> ..module1_1 <span class="keyword">import</span> test1_1</span><br><span class="line"><span class="keyword">from</span> ..package1_2 <span class="keyword">import</span> module1_2_1</span><br><span class="line"><span class="keyword">import</span> package2.package2_1.module2_1_1 <span class="keyword">as</span> m211  <span class="comment"># 这里只能用绝对导入</span></span><br><span class="line"></span><br><span class="line">test1_1()  <span class="comment"># test1_1是module1_1.py里的一个方法</span></span><br><span class="line">module1_2_1.test1_2_1()  <span class="comment"># test1_2_1是module1_2_1.py里的一个方法</span></span><br><span class="line">m211.test2_1_1()  <span class="comment"># test2_1_1是module2_1_1.py里的一个方法</span></span><br></pre></td></tr></table></figure><p>上面要注意的一点是，<code>package1</code>中的模块引用<code>package2</code>中的模块时，只能用绝对导入，因为<code>package1</code>和<code>package2</code>都是和入口文件<code>main.py</code>同级的</p><p>未完待续！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;h3 id=&quot;除，整除&quot;&gt;&lt;a href=&quot;#除，整除&quot; class=&quot;headerlink&quot; title=&quot;除，整除&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Python" scheme="http://liujinlongxa.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://liujinlongxa.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>修改模态界面的转场动画</title>
    <link href="http://liujinlongxa.com/2017/05/27/%E4%BF%AE%E6%94%B9%E6%A8%A1%E6%80%81%E7%95%8C%E9%9D%A2%E7%9A%84%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB/"/>
    <id>http://liujinlongxa.com/2017/05/27/修改模态界面的转场动画/</id>
    <published>2017-05-27T01:21:38.000Z</published>
    <updated>2017-05-27T02:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>模态（Modal）界面弹出动画一般是从下往上推出，如果要修改转场动画，可以设置modalTransitionStyle属性，代码如下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ViewController *vc = [[ViewController alloc] init];</span><br><span class="line">vc.modalTransitionStyle = <span class="built_in">UIModalTransitionStyleFlipHorizontal</span>;</span><br><span class="line">[<span class="keyword">self</span> presentViewController:vc animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p>modalTransitionStyle是一个枚举，有以下四个值，分别代表四种不同的转场效果，</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIModalTransitionStyleCoverVertical</span> = <span class="number">0</span>,</span><br><span class="line"><span class="built_in">UIModalTransitionStyleFlipHorizontal</span>,</span><br><span class="line"><span class="built_in">UIModalTransitionStyleCrossDissolve</span>,</span><br><span class="line"><span class="built_in">UIModalTransitionStylePartialCurl</span></span><br></pre></td></tr></table></figure><p>如果上面四种效果都不能满足你的需求，还可以使用CATransition进一步定制你的转场动画，代码如下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ViewController *vc = [[ViewController alloc] init];</span><br><span class="line"><span class="built_in">CATransition</span> *transition = [<span class="built_in">CATransition</span> animation];</span><br><span class="line">transition.type = kCATransitionMoveIn;</span><br><span class="line">transition.subtype = kCATransitionFromLeft;</span><br><span class="line">transition.duration = <span class="number">3.0</span>;</span><br><span class="line">transition.timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseIn];</span><br><span class="line">[<span class="keyword">self</span>.view.window.layer addAnimation:transition forKey:<span class="string">@"tran"</span>];</span><br><span class="line">[<span class="keyword">self</span> presentViewController:vc animated:<span class="literal">NO</span> completion:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p>使用CATransition的type和subtype两个属性可以定制16中转场动画，同时CATransition还可以设置转场持续的时间（duration）以及动画速度控制函数（timingFunction）等属性。注意，一定要把动画加载控制器view的window上。</p><p>完成代码，包括present和dismiss</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ViewController *vc = [[ViewController alloc] init];</span><br><span class="line"><span class="built_in">CATransition</span> *presentTransition = [<span class="built_in">CATransition</span> animation];</span><br><span class="line">presentTransition.type = kCATransitionMoveIn;</span><br><span class="line">presentTransition.subtype = kCATransitionFromLeft;</span><br><span class="line">presentTransition.duration = <span class="number">3.0</span>;</span><br><span class="line">presentTransition.timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseIn];</span><br><span class="line">[<span class="keyword">self</span>.view.window.layer addAnimation:presentTransition forKey:<span class="string">@"presentTransition"</span>];</span><br><span class="line">[<span class="keyword">self</span> presentViewController:vc animated:<span class="literal">NO</span> completion:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">CATransition</span> *dismissTransition = [<span class="built_in">CATransition</span> animation];</span><br><span class="line">dismissTransition.type = kCATransitionMoveIn;</span><br><span class="line">dismissTransition.subtype = kCATransitionFromRight;</span><br><span class="line">dismissTransition.duration = <span class="number">3.0</span>;</span><br><span class="line">dismissTransition.timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseIn];</span><br><span class="line">[<span class="keyword">self</span>.view.window.layer addAnimation:dismissTransition forKey:<span class="string">@"dismissTransition"</span>];</span><br><span class="line">[<span class="keyword">self</span> dismissViewControllerAnimated:<span class="literal">NO</span> completion:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p>如果CATransition的16种转场动画还不能满足你的需求，iOS7之后，可以使用UIViewControllerAnimatedTransitioning协议完全自定义转场动画，还能实现手势控制转动画。具体代码可以参考我写的这个<a href="https://github.com/liujinlongxa/AnimationTransition" target="_blank" rel="noopener">Demo</a>。</p><p>以上就是我对模态界面转场动画的一个总结。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;模态（Modal）界面弹出动画一般是从下往上推出，如果要修改转场动画，可以设置modalTransitionStyle属性，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://liujinlongxa.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="转场动画" scheme="http://liujinlongxa.com/tags/%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB/"/>
    
      <category term="CATransition" scheme="http://liujinlongxa.com/tags/CATransition/"/>
    
  </entry>
  
  <entry>
    <title>如何获取分享h5页面时的缩略图</title>
    <link href="http://liujinlongxa.com/2017/03/27/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%88%86%E4%BA%ABh5%E9%A1%B5%E9%9D%A2%E6%97%B6%E7%9A%84%E7%BC%A9%E7%95%A5%E5%9B%BE/"/>
    <id>http://liujinlongxa.com/2017/03/27/如何获取分享h5页面时的缩略图/</id>
    <published>2017-03-27T08:37:13.000Z</published>
    <updated>2017-03-27T09:04:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近产品提了一个需求，在分享应用内h5页面时，不能像以前一样，使用应用的图标作为分享的缩略图，要使用H5页面内的一张图片作为缩略图进行分享。</p><p>我调查了一下市面上一些常见应用的做法，基本上可以总结出三种做法：</p><h3 id="第一种方法：H5页面内指定分享图片地址"><a href="#第一种方法：H5页面内指定分享图片地址" class="headerlink" title="第一种方法：H5页面内指定分享图片地址"></a>第一种方法：H5页面内指定分享图片地址</h3><p>比较常见的做法是，在h5页面内定义一个JS的全局变量或者json，指定分享用的图片地址，APP内，通过JavaScriptCore获取全局变量，然后用于分享。</p><p>具体这样做的应用有：Keep，哔哩哔哩（部分页面），京东（部分页面）</p><p>还有一种是把分享的信息定义在页面头部(head标签里)，QQ音乐就是这样做的。</p><h3 id="第二种做法：固定分享页面内第一张符合条件的图片"><a href="#第二种做法：固定分享页面内第一张符合条件的图片" class="headerlink" title="第二种做法：固定分享页面内第一张符合条件的图片"></a>第二种做法：固定分享页面内第一张符合条件的图片</h3><p>如果H5页面是第三方提供，就不能通过第一种方法去指定分享内容了。这种情况下，大多数应用的做法就是取页面内第一张符合大小的图片作为分享图片。</p><p>这里我写了一个JS函数，只要把这个函数注入到H5页面中，APP就可以通过调用这个方法来获取到第一张符合大小的图片。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImage</span>(<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> images = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'img'</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; images.length; index++) &#123;</span><br><span class="line">        <span class="keyword">var</span> img = images[index];</span><br><span class="line">        <span class="keyword">var</span> imgData = <span class="keyword">new</span> Image();</span><br><span class="line">        imgData.src = img.src;</span><br><span class="line">        <span class="keyword">if</span> (imgData.width &gt; width &amp;&amp; imgData.height &gt; height) &#123;</span><br><span class="line">            <span class="keyword">return</span> imgData.src;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体这样做的应用有：微信，今日头条</p><h3 id="第三种做法：对页面进行截图，使用截图进行分享"><a href="#第三种做法：对页面进行截图，使用截图进行分享" class="headerlink" title="第三种做法：对页面进行截图，使用截图进行分享"></a>第三种做法：对页面进行截图，使用截图进行分享</h3><p>有些应用在分享时会对H5页面进行截图，然后把截图作为分享的内容。</p><p>具体这样做的应用有：微博，UC浏览器</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上就是三种获取H5页面内分享缩略图的三种策略，我们最终选择的是第一种和第二种相结合的方式，如果页面内指定了分享图片，则使用，否则获取页面内第一张符合条件的图片进行分享。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近产品提了一个需求，在分享应用内h5页面时，不能像以前一样，使用应用的图标作为分享的缩略图，要使用H5页面内的一张图片作为缩略图进行分享。&lt;/p&gt;
&lt;p&gt;我调查了一下市面上一些常见应用的做法，基本上可以总结出三种做法：&lt;/p&gt;
&lt;h3 id=&quot;第一种方法：H5页面内指定分
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://liujinlongxa.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="分享" scheme="http://liujinlongxa.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>深入理解git merge和git rebase（续）</title>
    <link href="http://liujinlongxa.com/2017/03/06/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3git-merge%E5%92%8Cgit-rebase%EF%BC%88%E7%BB%AD%EF%BC%89/"/>
    <id>http://liujinlongxa.com/2017/03/06/深入理解git-merge和git-rebase（续）/</id>
    <published>2017-03-06T01:34:43.000Z</published>
    <updated>2019-01-13T04:01:04.455Z</updated>
    
    <content type="html"><![CDATA[<p>本文接上一篇，主要讲解一下git rebase的用法和使用中注意的事项。</p><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>git rebase，也叫做变基，也是Git种一种合并代码的手段，与git merge不同的是，rebase是直接将一个分支从他们的共同父节点开始后的所有Commit依次合并到另外一个分支上。如下图：</p><p><img src="http://oldblog.shicishuzhai.com/e3bdbc7fff28676ccefdcb16f4d43095.png" alt="1"></p><p>两个分支develop和master，如果通过命令<code>git merge</code>将develop分支合并到master分支，Git会将‘C’，‘3’以及两个分支的共同父节点‘B’进行三路合并，合并完成后生成一个新节点，如下图：</p><p><img src="http://oldblog.shicishuzhai.com/ce919bb1921ee5c302baafbb0f45785f.png" alt="2"></p><p>如果<code>git rebase</code>将develop分支变基到master分支上，Git会将develop分支上的所有commit(1,2,3)依次合并到master，每一次合并都会生成一个新的提交(如下图1’,2’,3’)，合并完成后，如下图：</p><p><img src="http://oldblog.shicishuzhai.com/0478f567c5748186a200cd4da8b5ddd8.png" alt="3"></p><p>可以明显的看到，使用<code>git rebase</code>，分支线依然保持为一条，分支线看起来也没有那么乱，这也是<code>git rebase</code>相对于<code>git merge</code>的一个优点，但是另一方面，<code>git rebase</code>在合并每一个提交并生成一个新的提交时，会改写原来提交的提交时间（不会改写提交人），而且<code>git rebase</code>也没有留下合并的痕迹，可追溯性没那么强。</p><h3 id="为什么那么多冲突"><a href="#为什么那么多冲突" class="headerlink" title="为什么那么多冲突"></a>为什么那么多冲突</h3><p>在使用<code>git rebase</code>的过程中经常会遇到这种情况，在执行的<code>git rebase</code>操作后，遇到了一个冲突，修改冲突后执行<code>git rebase --continue</code>，然后又来一个冲突，冲突一个接一个，而且有时候同一个冲突会出现好几次。</p><p>其实，这是由rebase的原理造成的，Git在合并每一个Commit时都会判断是否有冲突，如下图：</p><p><img src="http://oldblog.shicishuzhai.com/90ff7dd4f79dddc65656820254dba48b.png" alt="4"></p><p>两个分支develop和master以及他们各自的文件内容，现在要将develop变基到master上，Git会先将develop的第一个commit和master分支的最新提交合并，合并后如下：</p><p><img src="http://oldblog.shicishuzhai.com/31c92a8c54e271fb69053a22c984c6dd.png" alt="5"></p><p>会报一个冲突，解决完冲突后，执行<code>git rebase --continue</code>，根据冲突不同的解决方案，可能会与不同的结果，如下图：</p><p><img src="http://oldblog.shicishuzhai.com/74efc09f8e231d078914a36f5223e289.png" alt="6"></p><p>上图中的两种冲突解决方案，在执行<code>git rebase --continue</code>后，依然再会报一个冲突，应为在合并develop的第二个提交时，依然有冲突。下面的解决方案则不会造成再次冲突，因为这种解决方案是完全用develop分支覆盖了master分支，如下图：</p><p><img src="http://oldblog.shicishuzhai.com/510fa8570fd012eb1723d6c521eb5cc6.png" alt="7"></p><p>以上就是造成<code>git rebase</code>冲突太多的具体原因。</p><h3 id="有那么点用的rerere"><a href="#有那么点用的rerere" class="headerlink" title="有那么点用的rerere"></a>有那么点用的rerere</h3><p>冲突太多怎么办，Git提供了一个辅助工具<code>git rerere</code>命令，具体用法可以参考<a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-Rerere" target="_blank" rel="noopener">git rerere</a>。rerere命令能够记住解决一个冲突的方法，这样在下一次看到相同冲突时，Git 可以为你自动地解决它。</p><p>那么rerere能够避免<code>git rebase</code>带来的冲突吗，答案是否定的。因为rerere在判断两个冲突是否为相同冲突是根据冲突体的两部分是否完全一样来进行的，就上面的例子而言，不管是哪种冲突解决方案，第一次和第二次冲突的冲突体都不完全一样，因此rerere都不会自动帮我们修复。</p><p><img src="http://oldblog.shicishuzhai.com/b80ef2ec61407d7a737a0997da6c960d.png" alt="8"></p><p>而且，rerere命令也会记住错误的冲突解决方案，下次遇到相同的冲突时会直接应用错误的方案。不过你可以使用<code>git rerere forget &lt;pathspec&gt;</code>命令来删除Git记住的冲突解决方案。</p><p>说了这么多，那rerere命令到底有什么用呢？</p><p><code>git rerere</code>命令为我们提供了一种减少冲突的方案：当你要保证一个长期分支会干净地合并，但是又不想要一串中间的合并提交。 将rerere功能打开后偶尔合并，解决冲突，然后返回到合并前。 如果你持续这样做，那么最终的合并会很容易，因为rerere可以为你自动做所有的事情。<code>git rerere</code>也可以将冲突的解决方案共享给项目组的其他成员。</p><p>所以说rerere命令还有一点用的，不过他并不能彻底解决冲突多的问题，减少冲突还是需要我们在平时使用时规范git的使用方法，使用统一的git工作流。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本来打算写一篇的，但是因为太长了，所以分为两篇来写。由于写的比较仓促，文中如果有什么纰漏，欢迎指出。</p><p>参考资料：<br><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Pro Git</a><br><a href="http://stackoverflow.com/questions/13825079/why-do-i-have-to-resolve-the-same-conflict-over-and-over" target="_blank" rel="noopener">Why do I have to resolve the same conflict over and over?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文接上一篇，主要讲解一下git rebase的用法和使用中注意的事项。&lt;/p&gt;
&lt;h2 id=&quot;git-rebase&quot;&gt;&lt;a href=&quot;#git-rebase&quot; class=&quot;headerlink&quot; title=&quot;git rebase&quot;&gt;&lt;/a&gt;git rebase&lt;/
      
    
    </summary>
    
      <category term="Git" scheme="http://liujinlongxa.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://liujinlongxa.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>深入理解git merge和git rebase</title>
    <link href="http://liujinlongxa.com/2017/03/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3git-merge%E5%92%8Cgit-rebase/"/>
    <id>http://liujinlongxa.com/2017/03/01/深入理解git-merge和git-rebase/</id>
    <published>2017-03-01T07:08:21.000Z</published>
    <updated>2019-01-13T04:01:04.507Z</updated>
    
    <content type="html"><![CDATA[<p><code>git merge</code>和<code>git rebase</code>是我们平时在使用Git过程中用到比较多的两个命令。本文将主要介绍这个两个命令的基本用法以及使用中应该注意的事项。</p><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><h3 id="不同的合并方式"><a href="#不同的合并方式" class="headerlink" title="不同的合并方式"></a>不同的合并方式</h3><p>顾名思义，<code>git merge</code>是用来将一个分支的代码合并到另一个分支。如下图，将develop分支上的代码合并到master分支上。</p><p><img src="http://oldblog.shicishuzhai.com/dafea7a6a7e2ce161b7b941ad4474186.png" alt="1"></p><p>上图中有一个<code>Fast-forward</code>字样，这是Git的一种合并方式。</p><p><img src="http://oldblog.shicishuzhai.com/31c51a26b1165b47797425e5d34a04a4.png" alt="2"></p><p>如上图，在master分支的B点时牵出一个develop分支，develop分支又有了3个新的提交1，2，3，而master分支此时没有新的提交，这是如果合并的话，develop分支不用动，master只用把分支的头指针指向develop的最新的一个提交3即可。合并后的结果如下图：</p><p><img src="http://oldblog.shicishuzhai.com/44379a35e3a385da59d1d996efd017bb.png" alt="3"></p><p>这个合并方式看似把两个分支合并了，实际上并没有真正进行合并操作，也没有留下合并的操作。默认<code>git merge</code>是采用<code>Fast-forward</code>方式进行合并的，如果不想采用这种方式，可以在命令后面加入<code>--no-ff</code>选项，如下：</p><p><img src="http://oldblog.shicishuzhai.com/161174b53c54146aa465eacf41140787.png" alt="4"></p><p>不使用<code>Fast-forward</code>的方式进行合并，Git会为合并生成一个新的提交，合并后的结果如下图：</p><p><img src="http://oldblog.shicishuzhai.com/091081cb40b5eedbc5dc4ab2c8e4e13e.png" alt="5"></p><p>Commit C即是Git自动生成的合并提交。一般情况下我们在合并代码时都会加上<code>--no-ff</code>，这样可以更清晰的看见合并操作。</p><h3 id="一个不大不小的坑"><a href="#一个不大不小的坑" class="headerlink" title="一个不大不小的坑"></a>一个不大不小的坑</h3><p>如下图：</p><p><img src="http://oldblog.shicishuzhai.com/e92aed55a7593922b525c2723894b202.png" alt="6"></p><p> 在牵出develop分支后，master分支又有了新的提交C，这时候如果把develop分支合并到master，就不能简单的通过移动master分支头指针来进行了，这时候默认执行的是<strong>recursive</strong>(递归)的策略进行合并的，这种策略下，Git会对两个分支的头结点（C与3）以及他们的共同父节点（B）进行三路合并，这种情况下就可能出现代码冲突。</p><p> 而且Git在合并两个分支时，并不会根据Commit的提交时间来判断哪个分支的代码更新，这就可能造成一个隐藏的问题：</p><p> 想象一下这种场景，一个团队内分为两个小组分别开发A和B两个功能版本，A版本的开发人员修改了某个文件（假定是file1），B版本的的开发人员发现他也要对file1做同样的修改才能继续开发，于是他对file1做了同样的修改（或者使用cherry-pick把A版本的相应的commit拉过来）。过了一段时间，A版本的开发人员发现他以前对file1的修改有问题，于是又把file1改了回去，而这时候B版本的开发人员并没有做同样的修改。这样，将来A版本和B版本合并到主干分支后，B版本的代码就会覆盖A的修改，于是错误的代码又被合并到了主干分支上。下面就是这个过程的示意图：</p><p><img src="http://oldblog.shicishuzhai.com/51b92d9f3934ffa53a1f2c9770a9895f.png" alt="7"></p><p>如图，序号1，2，3表示的是Commit的提交顺序，FeatureA分支在commit 2上把文件内容改为了<code>bbb111</code>, FeatureB分支把文件内容改为了<code>bbb222</code>，在commit 6上FeatureA有吧内容改回了<code>AAA</code>，而B分支没有做同样的修改，当把FeatureA合并到主干时，由于FeatureA相对于共通父节点Commit 1来说没有变化，因此就会使用FeatureB的内容作为最终的内容，而且这种情况下不会报任何冲突。这就极有可能造成错误的代码又被合并到了主干分支上，而且这种问题极难被察觉，就好像莫名其妙的发现代码丢失了一样。</p><p>要避免这种情况的发生，只能从流程上来规范git的操作。如果一个修改要应用到多个分支上，应该单独为这个修改建立一个临时分支，修改完成后，每一个需要用到这个修改的分支都合并这个临时分支。将来如果这个临时分支又有了新的提交，依然是每个分支都要合并。这样就可以避免出现上面的情况。</p><p>未完待续。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;git merge&lt;/code&gt;和&lt;code&gt;git rebase&lt;/code&gt;是我们平时在使用Git过程中用到比较多的两个命令。本文将主要介绍这个两个命令的基本用法以及使用中应该注意的事项。&lt;/p&gt;
&lt;h2 id=&quot;git-merge&quot;&gt;&lt;a href=&quot;#g
      
    
    </summary>
    
      <category term="Git" scheme="http://liujinlongxa.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://liujinlongxa.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发适配HTTPS总结</title>
    <link href="http://liujinlongxa.com/2017/02/07/iOS%E5%BC%80%E5%8F%91%E9%80%82%E9%85%8DHTTPS%E6%80%BB%E7%BB%93/"/>
    <id>http://liujinlongxa.com/2017/02/07/iOS开发适配HTTPS总结/</id>
    <published>2017-02-07T01:46:33.000Z</published>
    <updated>2019-01-13T04:00:21.974Z</updated>
    
    <content type="html"><![CDATA[<p>年前给公司的项目适配了HTTPS，本来年前就该写这篇博客的，一直拖到现在才写。</p><p>本文的主要内容就是对整个适配过程做一个总结。网上有很多详细的教程，具体的适配过程本文就不再赘述了，这里主要总结一下我在适配过程中越到的问题以及一些经验。</p><h2 id="测试自建证书"><a href="#测试自建证书" class="headerlink" title="测试自建证书"></a>测试自建证书</h2><p>适配完成后可以使用自建证书进行测试，关于如何创建自建证书，网上有很多教程，可以自行百度。如果你使用的是AFNetworking框架，使用自建证书也非常简单，首先见证书(abc.cer)导入项目，然后加入代码如下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.sessionManager = [[AFURLSessionManager alloc] initWithSessionConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration]];</span><br><span class="line"></span><br><span class="line">AFSecurityPolicy *securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate];</span><br><span class="line">securityPolicy.allowInvalidCertificates = <span class="literal">YES</span>;</span><br><span class="line">securityPolicy.validatesDomainName = <span class="literal">YES</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"abc.cer"</span> ofType:<span class="literal">nil</span>];</span><br><span class="line"><span class="built_in">NSData</span> *certData = [<span class="built_in">NSData</span> dataWithContentsOfFile:path];</span><br><span class="line"><span class="built_in">NSSet</span> *set = [<span class="built_in">NSSet</span> setWithObjects:certData, <span class="literal">nil</span>];</span><br><span class="line"><span class="keyword">if</span> (certData) &#123;</span><br><span class="line">    securityPolicy.pinnedCertificates = set;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">self</span>.sessionManager.securityPolicy = securityPolicy;</span><br></pre></td></tr></table></figure><p>当然，正式环境还是需要使用CA机构颁发的证书，使用CA机构颁发的证书不需要导入证书，只需要加入以下代码即可：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.sessionManager = [[AFURLSessionManager alloc] initWithSessionConfiguration:[<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration]];</span><br><span class="line"></span><br><span class="line">AFSecurityPolicy *policy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeNone];</span><br><span class="line"><span class="keyword">self</span>.sessionManager.securityPolicy = securityPolicy;</span><br></pre></td></tr></table></figure><h2 id="配置NSExceptionDomains"><a href="#配置NSExceptionDomains" class="headerlink" title="配置NSExceptionDomains"></a>配置NSExceptionDomains</h2><p>项目中一些不能使用HTTPS协议的请求，需要配置NSExceptionDomains。很多第三方服务的请求还没有支持HTTPS，这就需要我们把这些请求添加到NSExceptionDomains中。可以使用Charles抓包看有哪些第三方请求需要添加到NSExceptionDomains中。</p><p>另外，为了防止域名劫持，项目中可能会直接使用IP进行请求，我再测试过程中发现，即使不添加NSExceptionDomains，直接使用IP也可以正常请求。</p><p>对于WebView里的请求，可以NSAllowsArbitraryLoadsInWebContent字段来声明绕过ATS。</p><p>对于多媒体播放请求（使用AVFoundation），可以使用NSAllowsArbitraryLoadsInMedia字段来声明绕过ATS。</p><h2 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h2><p>一般公司服务器都会有多个环境（测试环境，正式环境等），证书一般只配置在正式环境上，这就要求我们在测试环境下需要关闭ATS。如果每次都手动修改Info.plist文件来关闭ATS，不但麻烦，也可能导致配置的信息丢失。一种比较好做法是创建多个Info.plist，根据不同的环境，自动切换使用不同的Info.plist。</p><p>如下，创建多个Info.plist</p><p><img src="http://oldblog.shicishuzhai.com/0c578284b3e0e8649ec145e1413f3d7a.png" alt="2"></p><p>然后在Build Setting中配置不同的环境使用不同的Info.plist</p><p><img src="http://oldblog.shicishuzhai.com/190482fe4f86763e6184834be9cff0bf.png" alt="3"></p><p>这样做有一个不好的地方是如果修改了Info.plist文件，需要同时修改两个。但这也比每次切换环境修改Info.plist要好，因为毕竟修改Info.plist的情况还是比较少的。</p><p>以上就是我在适配HTTPS过程中遇到的一些问题，希望对大家有所帮助。</p><p>参考资料：</p><p><a href="http://www.2cto.com/kf/201611/570823.html" target="_blank" rel="noopener">iOS开发适配HTTPS详细教程</a><br><a href="https://onevcat.com/2016/06/ios-10-ats/" target="_blank" rel="noopener">关于iOS10中ATS的问题</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;年前给公司的项目适配了HTTPS，本来年前就该写这篇博客的，一直拖到现在才写。&lt;/p&gt;
&lt;p&gt;本文的主要内容就是对整个适配过程做一个总结。网上有很多详细的教程，具体的适配过程本文就不再赘述了，这里主要总结一下我在适配过程中越到的问题以及一些经验。&lt;/p&gt;
&lt;h2 id=&quot;测
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://liujinlongxa.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="HTTPS" scheme="http://liujinlongxa.com/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>使用NSURLProtocol时要注意的一些问题</title>
    <link href="http://liujinlongxa.com/2016/12/20/%E4%BD%BF%E7%94%A8NSURLProtocol%E6%B3%A8%E6%84%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://liujinlongxa.com/2016/12/20/使用NSURLProtocol注意的一些问题/</id>
    <published>2016-12-20T15:34:03.000Z</published>
    <updated>2017-03-01T06:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目中使用到了NSURLProtocol，用于拦截所有发出的请求并做一些处理。具体用法可以参考<a href="http://nshipster.cn/nsurlprotocol/" target="_blank" rel="noopener">这篇文章</a>，我还专门写了一个<a href="https://github.com/liujinlongxa/NSURLProtocolDemo" target="_blank" rel="noopener">Demo</a>。最近在使用过程中遇到了一些问题，记录如下。</p><h2 id="拦截到的POST请求的HTTPBody为空"><a href="#拦截到的POST请求的HTTPBody为空" class="headerlink" title="拦截到的POST请求的HTTPBody为空"></a>拦截到的POST请求的HTTPBody为空</h2><p>最近由于升级了AFNetworking，在使用NSURLProtocol过程中发现了一个问题，就是在拦截到POST请求后，HTTPBody是空的。以前使用旧版本的AFNetworking时是没有这问题的。分析了一下，新版的AFNetworking使用的是NSURLSession，旧版使用的是NSURLConnection，可能是由于这个原因导致的。网上查了一下，还真有这个问题，具体可以看<a href="http://stackoverflow.com/questions/36555018/why-is-the-httpbody-of-a-request-inside-an-nsurlprotocol-subclass-always-nil" target="_blank" rel="noopener">这个问题</a>以及<a href="https://bugs.webkit.org/show_bug.cgi?id=137299" target="_blank" rel="noopener">这里的讨论</a>。</p><p>网上有人提出了一种解决方案，就是不要使用HTTPBody，而使用HTTPBodyStream。具体实现如下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSMutableURLRequest</span> * request = [[<span class="built_in">NSMutableURLRequest</span> alloc] initWithURL:url];</span><br><span class="line">request.allHTTPHeaderFields = <span class="keyword">self</span>.request.allHTTPHeaderFields;</span><br><span class="line"><span class="keyword">if</span> ([<span class="keyword">self</span>.request.HTTPMethod isEqualToString:<span class="string">@"POST"</span>]) &#123;</span><br><span class="line">    request.HTTPMethod = <span class="string">@"POST"</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.request.HTTPBody) &#123;</span><br><span class="line">        uint8_t d[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">NSInputStream</span> *stream = <span class="keyword">self</span>.request.HTTPBodyStream;</span><br><span class="line">        <span class="built_in">NSMutableData</span> *data = [[<span class="built_in">NSMutableData</span> alloc] init];</span><br><span class="line">        [stream open];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ([stream hasBytesAvailable]) &#123;</span><br><span class="line">            <span class="built_in">NSInteger</span> len = [stream read:d maxLength:<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">if</span> (len &gt; <span class="number">0</span> &amp;&amp; stream.streamError == <span class="literal">nil</span>) &#123;</span><br><span class="line">                [data appendBytes:(<span class="keyword">void</span> *)d length:len];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        request.HTTPBody = [data <span class="keyword">copy</span>];</span><br><span class="line">        [stream close];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        request.HTTPBody = <span class="keyword">self</span>.request.HTTPBody;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这个方法就可以获得HTTPBody的内容。</p><h2 id="registerClass-方法只适用于sharedSession"><a href="#registerClass-方法只适用于sharedSession" class="headerlink" title="+registerClass:方法只适用于sharedSession"></a><code>+registerClass:</code>方法只适用于<code>sharedSession</code></h2><p>另外一个要注意的地方就是，只用在使用<code>[NSURLSession sharedSession]</code>时，注册NSURLProtocol才能使用<code>+registerClass:</code>方法，否则就需要使用<code>NSURLSessionConfiguration</code>来注册NSURLProtocol，代码如下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSURLSessionConfiguration</span> *configuration = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</span><br><span class="line">configuration.protocolClasses = @[[MySessionURLProtocol <span class="keyword">class</span>]];</span><br><span class="line"><span class="keyword">self</span>.session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:configuration];</span><br></pre></td></tr></table></figure><p>因此，对于新版的AFNetworking，由于它使用的不是<code>sharedSession</code>，所以就不能简单的通过类方法<code>+registerClass:</code>来注册自定义NSURLProtocol，也必须通过<code>NSURLSessionConfiguration</code>来设置。代码如下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSURLSessionConfiguration</span> *configuration = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</span><br><span class="line">configuration.protocolClasses = @[[CustomUrlProtocol <span class="keyword">class</span>]];</span><br><span class="line">AFHTTPSessionManager *sessionManager = [[AFHTTPSessionManager alloc] initWithBaseURL:baseUrl sessionConfiguration:configuration];</span><br><span class="line">[sessionManager GET:url parameters:params progress:^(<span class="built_in">NSProgress</span> * _Nonnull downloadProgress) &#123;</span><br><span class="line">    <span class="comment">// do somting</span></span><br><span class="line">&#125; success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span>  _Nullable responseObject) &#123;</span><br><span class="line">    <span class="comment">// do somting</span></span><br><span class="line">&#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</span><br><span class="line">    <span class="comment">// do somting</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>以上就是使用NSURLProtocol时要注意的两个问题，希望能对大家有所帮助。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目中使用到了NSURLProtocol，用于拦截所有发出的请求并做一些处理。具体用法可以参考&lt;a href=&quot;http://nshipster.cn/nsurlprotocol/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这篇文章&lt;/a&gt;，我还专门写
      
    
    </summary>
    
      <category term="iOS Tips" scheme="http://liujinlongxa.com/categories/iOS-Tips/"/>
    
    
      <category term="其他" scheme="http://liujinlongxa.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Xcode如何设置在编译前自动运行脚本</title>
    <link href="http://liujinlongxa.com/2016/11/27/Xcode%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E5%9C%A8%E7%BC%96%E8%AF%91%E5%89%8D%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/"/>
    <id>http://liujinlongxa.com/2016/11/27/Xcode如何设置在编译前自动运行脚本/</id>
    <published>2016-11-27T04:45:13.000Z</published>
    <updated>2019-01-13T04:01:04.558Z</updated>
    
    <content type="html"><![CDATA[<p>有时我们可能需要在iOS项目打包前执行一些操作，例如更新资源，修改配置等等，手动修改太麻烦也太Low了，那有没有自动执行的方法呢？</p><p>当然有，这里我会列举三种方法，并且着重讲解一下最后一种方法</p><h3 id="三种方法"><a href="#三种方法" class="headerlink" title="三种方法"></a>三种方法</h3><ul><li>第一种方法：如果你使用的是脚本进行打包，那么事情就简单了，在执行xcodebuild命令前，执行你想做的操作就可以了。</li><li>第二种方法：使用CI平台，最常用的就是jenkins，一般的CI平台都支持在编译前执行脚本。</li><li>第三种方法：如果你使用的是Xcode Archive进行打包，那么就要用到下面的方法添加编译前执行的脚本。</li></ul><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><p>打开项目配置，选择Build Phases</p><p><img src="http://oldblog.shicishuzhai.com/5335ab06bc21202c00fa0014d2df47a3.png" alt="1"></p><p>点击左上角的加号，选择New Run Script Phase</p><p><img src="http://oldblog.shicishuzhai.com/63c4d36a01c97b137892fa32fb78a028.png" alt="2"></p><p>这样就可以创建一个新Script Phase，然后在黑色区域写入你的脚本</p><p><img src="http://oldblog.shicishuzhai.com/f247183d1bc837e1d67ea5ae04281be5.png" alt="3"></p><p>在脚本中，你可以使用一些环境变量，例如<code>${SRCROOT}</code>表示项目的根目录，<code>${CONFIGURATION}</code>表示项目的Configuration，更多可以使用的环境变量可以参考<a href="https://developer.apple.com/legacy/library/documentation/DeveloperTools/Reference/XcodeBuildSettingRef/0-Introduction/introduction.html#//apple_ref/doc/uid/TP40003931-CH1-SW1" target="_blank" rel="noopener">苹果官方文档</a>。</p><p>最后一步，也是最关键的一步（我在这里卡了半天），选中你创建的Script Phase，然后按住鼠标，把它拖到Compile Source的上面，这样你的脚本才会在代码编译前执行，否则脚本是在代码编译后执行的，如下图：</p><p><img src="http://oldblog.shicishuzhai.com/d44a9e7f77e737fce5826e39d74a3d9d.png" alt="4"></p><p>这样在编译时就会自动执行脚本了。上图中的脚本内容是在Release下编译时自动执行一个Python脚本。脚本的输出内容可以在Build Log里找到，如下图：</p><p><img src="http://oldblog.shicishuzhai.com/7bef4677d75f71376b834102880f364b.png" alt="5"></p><p>以上就是整个配置过程，希望这篇文章对您有帮助。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时我们可能需要在iOS项目打包前执行一些操作，例如更新资源，修改配置等等，手动修改太麻烦也太Low了，那有没有自动执行的方法呢？&lt;/p&gt;
&lt;p&gt;当然有，这里我会列举三种方法，并且着重讲解一下最后一种方法&lt;/p&gt;
&lt;h3 id=&quot;三种方法&quot;&gt;&lt;a href=&quot;#三种方法&quot; 
      
    
    </summary>
    
      <category term="iOS Tips" scheme="http://liujinlongxa.com/categories/iOS-Tips/"/>
    
    
      <category term="Xcode" scheme="http://liujinlongxa.com/tags/Xcode/"/>
    
  </entry>
  
</feed>
